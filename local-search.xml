<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JavaScript构造函数和原型对象</title>
    <link href="/JavaScript%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1/"/>
    <url>/JavaScript%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="对于创建对象的几种方式"><a href="#对于创建对象的几种方式" class="headerlink" title="对于创建对象的几种方式"></a>对于创建对象的几种方式</h2><blockquote><p>既然讲到了创建对象，我们就先把创建对象的几种方式先罗列一下，也算是给后面的重点做一个铺垫</p><p>对象在 JavaScript 里面的重要性相信不用我多说，万物皆对象呀！</p></blockquote><h3 id="简单的创建对象方式"><a href="#简单的创建对象方式" class="headerlink" title="简单的创建对象方式"></a>简单的创建对象方式</h3><p>用 <code>new Object()</code> 的方式来创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>person.name = <span class="hljs-string">&quot;Bob&quot;</span>;<br>person.age = <span class="hljs-number">18</span>;<br>person.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br>person.sayName();<br></code></pre></td></tr></table></figure><p>先用 <code>new Object()</code> 创建一个对象，然后再把 属性和方法逐渐补充上去</p><h3 id="对象字面量创建对象"><a href="#对象字面量创建对象" class="headerlink" title="对象字面量创建对象"></a>对象字面量创建对象</h3><p>用 <code>&#123;&#125;</code> 符号来进行创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person1 = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;Bob&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>属性和方法 在创建对象时放在 <code>&#123;&#125;</code> 内部，用键值对的方式一并创建</p><p><strong>前两种方法一次只能创建一个对象，在生成多个相似对象时，这种方式会出现大量重复造轮子，产生重复的代码，这样既影响代码的美观性，也影响了代码的运行效率，那如果我们想要批量生成对象就得看下面的方法了</strong></p><h3 id="工厂模式创建对象"><a href="#工厂模式创建对象" class="headerlink" title="工厂模式创建对象"></a>工厂模式创建对象</h3><p>创建一个普通函数，在函数内部来创建一个对象，给创建的对象添加属性和方法并返回对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPerson</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>    person.name = name;<br>    person.age = age;<br>    person.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> person;<br>&#125;<br><br><span class="hljs-comment">//对象实例化</span><br><span class="hljs-keyword">var</span> person1 = createPerson(<span class="hljs-string">&#x27;Mike&#x27;</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><p>那我们能不能把 工厂模式写的更简单点，直接返回一个对象呢，答案是可以的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPerson</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">name</span> : name,<br>        <span class="hljs-attr">age</span> : age,<br>        <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//对象实例化</span><br><span class="hljs-keyword">var</span> person1 = createPerson(<span class="hljs-string">&#x27;Mike&#x27;</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><p>工厂模式通俗来说就是按照工厂一样来生成变量的过程，可以生成多个相似的对象，但是却没有解决对象的识别问题（即不知道这个对象的类型），看到构造函数就能明白没有解决对象识别是什么意思了</p><h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h3><p>什么是构造函数模式，它又有什么优点和缺点呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Mike&#x27;</span>,<span class="hljs-number">19</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Bob&#x27;</span>,<span class="hljs-number">21</span>);<br></code></pre></td></tr></table></figure><p>看代码，发现 <code>Person()</code>函数取代了<code>createPerson()</code>函数，构造函数名的<strong>首字母</strong>是<strong>大写</strong>的（这是规范），这是构造函数的惯例。因为构造函数也是函数，只不过是首字母大写的罢了，要配合 <code>new</code> 关键字才能体现出它的价值</p><p>换句话说，构造函数要配合 <code>new</code> 关键字一起使用才有意义（没有 new 来调用，构造函数和普通函数没有区别）</p><p>其实也就是和 <code>var person1 = new Object()</code>差不多，那么 <code>new</code> 关键字的作用是什么呢？</p><p><code>new </code>  关键字的用途</p><ul><li>创建一个新对象</li><li>将函数内部的 this 指向了这个新对象</li><li>执行构造函数内部的代码</li><li>将新对象作为返回值</li></ul><p>看到这我们会想，构造函数和对象是如何联系的，我们把构造函数这块单独拉出来讲比较好</p><h2 id="构造函数和普通函数的区别："><a href="#构造函数和普通函数的区别：" class="headerlink" title="构造函数和普通函数的区别："></a><strong>构造函数和普通函数的区别：</strong></h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>构造函数和普通函数的唯一的区别不在于它们自己本身，而是在调用方式</li><li>任何函数只要通过 <code>new</code> 来调用，那它就可以作为构造函数，如果任何函数不通过 <code>new</code> 操作符来调用，那它就是普通的函数。</li></ol><h3 id="关于返回值"><a href="#关于返回值" class="headerlink" title="关于返回值"></a>关于返回值</h3><ul><li>普通函数在有 <code>return</code> 返回值时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <br><span class="hljs-built_in">console</span>.log (foo());<br></code></pre></td></tr></table></figure><p>返回返回值的内容</p><ul><li>普通函数在没有<code>return</code>返回值时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params"></span>) </span>&#123;<br><br> &#125; <br><span class="hljs-built_in">console</span>.log (foo());<br></code></pre></td></tr></table></figure><p>返回 <code>undefined</code></p><ul><li>构造函数在有 <code>return</code> 返回值时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> Foo();<br><span class="hljs-built_in">console</span>.log(test);<br></code></pre></td></tr></table></figure><p>返回构造函数实例化的对象</p><ul><li>构造函数在无 <code>return</code> 返回值时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>&#125; <br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> Foo();<br><span class="hljs-built_in">console</span>.log(test);<br></code></pre></td></tr></table></figure><p>返回构造函数实例化的对象</p><ul><li>构造函数在有 <code>return</code> 返回值且返回值是对象时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span> (<span class="hljs-params"></span>) = </span>&#123;<br><span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Mike&#x27;</span>&#125;<br>&#125; <br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> Foo();<br><span class="hljs-built_in">console</span>.log(test);<br></code></pre></td></tr></table></figure><p>返回 返回值中的对象</p><p><strong>因此</strong></p><p><strong>普通函数有返回值则返回返回值，没有返回值则返回 undefined</strong></p><p><strong>构造函数有返回值且返回值是个对象，就返回这个对象，如果构造函数没有返回值就返回构造函数生成的实例化对象</strong></p><h3 id="关于-this的值"><a href="#关于-this的值" class="headerlink" title="关于 this的值"></a>关于 this的值</h3><p>普通函数的 <code>this </code>值指向 <code>window </code>对象</p><p>构造函数内的 <code>this </code>值指向实例对象</p><h2 id="构造函数的优缺点"><a href="#构造函数的优缺点" class="headerlink" title="构造函数的优缺点"></a>构造函数的优缺点</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点：</strong></h3><p>其实我们在上面代码中创建的两个实例对象，都会有个 <code>constructor</code>（构造函数）属性，<strong>实例对象</strong>就是通过这个属性来<strong>指向 构造函数的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(person1.constructor === Person);<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(person2.constructor === Person);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>不过用 <code>instanceof</code> 操作符来检测对象类型会更加可靠</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(person1 <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(person2 <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>创建自定义的构造函数意味着将来可以将他的<strong>实例标识为一种特殊类型</strong>，这就是构造函数比工厂模式强的地方，因为构造函数生成的实例知道自己从哪里来，通过谁产生的，这很重要</p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><strong>缺点：</strong></h3><p>构造函数最明显的缺点就是，每个方法都要在每个实例上重新创建一遍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.sayAge = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.Age);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Mike&#x27;</span>,<span class="hljs-number">19</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Bob&#x27;</span>,<span class="hljs-number">21</span>);<br></code></pre></td></tr></table></figure><p>就像以上代码，<code>sayName</code> 方法 和 <code>sayAge</code>  方法，在实例上没有必要重新创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(person1.sayName === person2.sayName);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>判断各自方法发现他们各自都开辟了一个新的空间，这引起了一种<strong>内存的浪费</strong></p><h2 id="优化构造函数"><a href="#优化构造函数" class="headerlink" title="优化构造函数"></a>优化构造函数</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//解决1：将公共函数提取到构造函数之外</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayName</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayAge</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sayName = sayName;<br>    <span class="hljs-built_in">this</span>.sayAge = sayAge;<br><span class="hljs-comment">// this 内部的 type 属性值所在的内存是不变的</span><br>    <span class="hljs-built_in">this</span>.type = <span class="hljs-string">&quot;human&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方法可以解决内存浪费的问题，但是</p><p>问题：如果有多个公共函数，需要在外部创建多个函数，可能会造成命名冲突</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 解决2 将多个公共函数封装到一个对象中</span><br><span class="hljs-keyword">var</span> fns = &#123;<br>    <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;,<br>    <span class="hljs-attr">sayAge</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sayName = fns.sayName;<br>    <span class="hljs-built_in">this</span>.sayAge = fns.sayAge;<br>    <span class="hljs-comment">// this 内部的 type 属性值所在的内存是不变的</span><br>    <span class="hljs-built_in">this</span>.type = <span class="hljs-string">&quot;human&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样就又可以解决内存浪费问题，还能防止命名冲突</p><p>但是….这我们创建构造函数的意义何在，生成对象全部由构造函数解决那才舒服不是么</p><p>这样我们就需要 原型对象 来帮我们解决这个问题了</p><p>还记得前面提到 <code>constructor</code>属性么，我们现在要来深入理解下构造函数</p><h2 id="构造函数的原型对象"><a href="#构造函数的原型对象" class="headerlink" title="构造函数的原型对象"></a>构造函数的原型对象</h2><p>补充：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    静态成员和实例成员：</span><br><span class="hljs-comment">    ·使用构造函数方法创建对象时，可以给构造函数和创建实例对象添加属性和方法，这些属性和方法都叫做成员</span><br><span class="hljs-comment">    ·实例成员：在构造函数内部添加给 this 的成员，属于实例对象的成员，在创建实例对象后必须有对象调用</span><br><span class="hljs-comment">    ·静态成员：添加给构造函数自身的成员，只能使用构造函数调用，不能使用生成的实例对象调用</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 自定义构造函数</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">// 实例成员，通过将来生成的实例对象进行调用的成员</span></span><br><span class="javascript">    <span class="hljs-comment">// 创建时直接调用给函数内部的 this</span></span><br><span class="javascript">    <span class="hljs-built_in">this</span>.name = name;</span><br><span class="javascript">    <span class="hljs-built_in">this</span>.age = age;</span><br><span class="javascript">    <span class="hljs-built_in">this</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-comment">// 静态成员 -- 直接给构造函数添加的成员，无法被实例对象调用</span></span><br><span class="javascript">Person.version = <span class="hljs-string">&quot;1.0&quot;</span>;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上的知识点是对构造函数的补充</p><p>接下来我们的重点是原型对象</p><p>以下是一个构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name;<br>    <span class="hljs-built_in">this</span>.age;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以用 <code>prototype</code> 属性，获取构造函数的原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(Person.prototype);<br></code></pre></td></tr></table></figure><p>原型对象内可以添加一些属性和方法，它可以抽象理解为一连接着<strong>构造函数</strong>和它的<strong>实例对象</strong>的一个<strong>公共空间</strong>，在这个公共空间内创建的对象和属性，会传递给构造函数，而且构造函数创建的实例对象也可以调用这些函数和属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Person.prototype.type = <span class="hljs-string">&quot;human&quot;</span>;<br>Person.prototype.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hi&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>大致就是这样一个意思，接下来我们来看下他们三者是如何“相爱相杀”，哦不，如何联系在一起的吧！</p><p>先上图：</p><p><img src="%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B.jpg" alt="构造函数原型"></p><ul><li>首先构造函数有自己的 <code>prototype</code> 属性指向自己的原型对象</li><li>原型对象 有一个 <code>constructor</code> 属性返回来指向构造函数(调用方式：构造函数名<code>.prototype.constructor)</code></li><li>构造函数可以通过 <code>new </code>方法生成实例对象</li><li>实例对象通过 <code>__proto__ </code>的属性可以找到原型对象</li></ul><p>不过对于实例在日常开发中，是不会书写 <code>__proto__</code>属性的，直接打点调用原型对象上的方法即可</p><p><strong><code>__proto__</code>属性</strong>并不是一个标准的属性，是浏览器根据语法自动生成的</p><p>因为 <code>__proto__ </code> 属性并不是一个标准的属性，是浏览器根据语法自动生成的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">// 更优的解决方法，将所有实例共享的属性和方法，都添加给原型对象</span><br>Person.prototype.type = <span class="hljs-string">&quot;human&quot;</span>;<br>Person.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 方法调用时，哪个对象调用，this就指向谁</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br>Person.prototype.sayAge = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 方法调用时，哪个对象调用，this就指向谁</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>&#125;<br><br><span class="hljs-comment">// 生成实例对象</span><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Mike&quot;</span>,<span class="hljs-number">21</span>);<br><br><span class="hljs-comment">// 调用原型对象上公用的属性方法</span><br>person1.sayAge();<br>person1.sayName();<br>person2.sayAge();<br>person2.sayName();<br></code></pre></td></tr></table></figure><p>这样我们就解决了构造函数创建对象内存浪费问题</p><p>对于以上<strong>两种方法</strong>以及<strong>第三种利用构造函数原型的方法</strong>中内存地址是否相同，如果存在怀疑的话我们还可以测试下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(person<span class="hljs-number">1</span>.sayAge === person<span class="hljs-number">2</span>.sayAge);<br><span class="hljs-attribute">console</span>.log(person<span class="hljs-number">1</span>.sayName === person<span class="hljs-number">2</span>.sayName);<br></code></pre></td></tr></table></figure><p>输出的结果都是 <code>true</code>哦！</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h3 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h3><p><strong>为什么实例对象可以调用构造函数的 prototype 原型对象的属性和方法？</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Lily&quot;</span>,<span class="hljs-number">20</span>);<br><br><span class="hljs-built_in">console</span>.log(person1);<br></code></pre></td></tr></table></figure><p><img src="%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.png" alt="原型对象"></p><p>可以看到我们给对象定义的两个属性（<code>age</code> 和 <code>name</code>），我们点开 <code>__proto__</code> 指针，里面就是原型对象的内容</p><p>显示出了原型对象中我们加入的 <code>sayName </code>函数，以及 <code>type</code> 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> o = person1.__proto__; <span class="hljs-comment">//指向的是 Persn 构造函数的原型对象</span><br></code></pre></td></tr></table></figure><p>任何一个对象 都有 <code>__proto__</code> 属性，指向的就是该对象的 构造函数的 原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//实例对象的构造函数的原型对象</span><br><span class="hljs-keyword">var</span> o = person1.__proto__;<br><span class="hljs-comment">//原型对象的构造函数的原型对象</span><br><span class="hljs-keyword">var</span> o2 = o.__proto__;<br><span class="hljs-built_in">console</span>.log(o2);<br><span class="hljs-comment">//原型对象的构造函数</span><br><span class="hljs-built_in">console</span>.log(o2.constructor);<br></code></pre></td></tr></table></figure><p><img src="%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%9D%A5%E6%BA%90.png" alt="原型对象来源"></p><p>我们就发现原来我们的构造函数的原型对象，都是由一个 <code>Object()</code> 构造函数生成的</p><p>而这个构造函数来源于另一个我们没见过的原型对象</p><p>因为任何一个对象都有 <code>__proto__</code> 属性，其实我们还可以看看这个 Object()原型对象的构造函数的原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(o2.__proto__);<br></code></pre></td></tr></table></figure><p>然后就输出了 <code>null</code> (没有任何内容–没有任何属性和方法)</p><p>其实以上四个原型对象就是我们探究的原型链的组成部分</p><p><img src="%E5%8E%9F%E5%9E%8B%E9%93%BE.jpg" alt="原型对象来源"></p><p>那原型链有什么用？</p><p>当我们查找一个方法时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(person1.valueOf());<br></code></pre></td></tr></table></figure><p>我们 person1 的构造函数的原型对象没有这个方法，就会往上级原型对象查找方法</p><p>案例在 Object 原型对象 中找到了 valueOf() 方法，并输出了实例对象本身</p><p>铺垫的差不多了，那么原型链查找机制就该有个定义了</p><h3 id="原型链查找机制"><a href="#原型链查找机制" class="headerlink" title="原型链查找机制"></a>原型链查找机制</h3><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p><ol><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ol><p><strong>实例对象读写原型对象的成员</strong></p><p>读取：</p><ul><li>现在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链末端都没有找到，则返回 <code>undefined</code></li></ul><p>值类型成员写入（实例对象.值类型成员 = xx）</p><ul><li>当实例重写原型对象中的某个普通数据成员时实际上会把<strong>该成员添加到自己身上</strong></li><li>也就是说该行为实际上会<strong>屏蔽掉对原型对象成员的访问</strong></li><li>想通过实例对象直接打点更改原型对象的值和方法是不会成功的，实例对象只会给自己添加新的值和方法</li><li>想要通过实例对象更改原型对象的值必须 <code>实例对象的构造函数.prototype.值/方法 </code>来创建/更改</li></ul><p>引用类型成员写入（实例对象.引用类型成员 = xx）：</p><ul><li>同上</li></ul><p>但是如果时复杂类型成员进行修改就不一样了</p><p>复杂类型成员修改（实例对象.成员.xx = xx）</p><ul><li>同样会现在自身找该成员，如果自身找到直接修改</li><li>如果自身找不到，则沿着原型链继续查找，如果找到则修改</li><li>如果一直到原型链的末端还没有找到该成员，则报错（实例对象.undefined.xx = xx）</li></ul><h3 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h3><p>前面在原型对象每添加一个属性和方法就要书写一遍 Person.prototype</p><p>为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的 <strong>对象字面量</strong>来重写整个原型对象将<code>Person.prototype</code> 重置到一个新的对象</p><p>注意：原型对象会丢失 <code>constructor</code> 成员，所以需要手动将 <code>constructor</code>指向正确的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//直接使用对象字面量对原型对象进行赋值</span><br>Person.prototype = &#123;<br>    <span class="hljs-attr">type</span> : <span class="hljs-string">&quot;human&quot;</span><br>    <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//生成对象实例</span><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Mike&quot;</span>,<span class="hljs-number">28</span>);<br>person1.sayName();<br><span class="hljs-comment">//缺陷</span><br><span class="hljs-built_in">console</span>.log(person2,<span class="hljs-title">constructor</span>);<span class="hljs-comment">//Object()</span><br><span class="hljs-comment">//因为 Person.prototype 的 constructor 属性被重置了，person2 的构造函数 Person 的原型对象里面找不到这个值，就输出了有 constructor 属性的 上级原型对象 Object() </span><br><br><span class="hljs-comment">//解决方式，赋值时多加一条 constructor 属性</span><br>Person.prototype = &#123;<br>    <span class="hljs-attr">constructor</span> : Person, <span class="hljs-comment">//手动把 constructor 属性指向正确的构造函数</span><br>    <span class="hljs-attr">type</span> : <span class="hljs-string">&quot;human&quot;</span>,<br>    <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="原型对象的使用建议"><a href="#原型对象的使用建议" class="headerlink" title="原型对象的使用建议"></a>原型对象的使用建议</h3><p>在定义构造函数时，可以根据成员的功能不同，分别进行设置</p><ul><li>私有成员（一般就是非函数成员）放到构造函数中</li><li>共享成员（一般就是函数）放到原型对象中</li><li>如果重置了 prototype 记得修正 constructor 的指向</li></ul><h3 id="JS-原生构造函数的原型对象"><a href="#JS-原生构造函数的原型对象" class="headerlink" title="JS 原生构造函数的原型对象"></a>JS 原生构造函数的原型对象</h3><p>所有函数都有 prototype 属性对象</p><p>JavaScript 中的内置构造函数也有 prototype 原型对象属性：</p><ul><li>Object.prototype</li><li>Function.prototype</li><li>Array.prototype</li><li>String.prototype</li><li>Number.prototype</li></ul><p>…</p><p>想知道这些原型对象中都有什么，那就自己去输出看看吧~</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>构造函数</tag>
      
      <tag>原型对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript的一些隐式转换</title>
    <link href="/JavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <url>/JavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="1、JS中的“-”隐式转换规则"><a href="#1、JS中的“-”隐式转换规则" class="headerlink" title="1、JS中的“==”隐式转换规则"></a>1、JS中的“==”隐式转换规则</h2><ul><li>对象和布尔值进行比较的时候，对象会先转换为字符串，然后转换为数字，而参与比较的布尔值会直接转换为数字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[] == <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>结果为<code>true</code>，<code>[]</code>先转换为字符串 <code>&quot;&quot;</code> ，然后再转换为数字 <code>0</code>，布尔值 <code>false</code> 直接转换为数字 <code>0</code></p><ul><li>对象和字符串进行比较时，对象转换为字符串，然后两者进行比较</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;8,2,5&#x27;</span><br></code></pre></td></tr></table></figure><p>结果是 <code>true</code> ， <code>[8,2,5]</code> 转化为字符串 <code>&quot;8,2,5&quot;</code></p><ul><li>对象和数字比较时，对象转化为字符串,然后转换为数字，再和数字进行比较</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>结果为 <code>true</code> ，<code>[1]</code> 转换为字符串 <code>&quot;1&quot;</code>，然后再转换为数字 <code>1</code></p><ul><li>字符串和数字比较时，字符串转换为数字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">`1`</span> == <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>结果为<code>true</code> ，字符串<code>&quot;1&quot;</code>转换为数字 <code>1</code>，<code>1 == 1 =&gt; true</code></p><ul><li>字符串和布尔值进行比较时，二者全部转换成数值再比较</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;1&#x27;</span> == <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>结果为<code>true</code> ，字符串<code>&quot;1&quot;</code>转换为数字 <code>1</code>，<code>true</code>转换为数字 <code>1</code>，然后：  <code>1 == 1 =&gt; true</code></p><ul><li>布尔值和数字进行比较时，布尔值转为数字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">true</span> == <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>结果为 <code>true</code>，<code>true</code>转换为数字 <code>1</code>再进行比较</p><p><img src="%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="流程图"></p><h2 id="2、if-判断时，括号内的隐式转换"><a href="#2、if-判断时，括号内的隐式转换" class="headerlink" title="2、if 判断时，括号内的隐式转换"></a>2、if 判断时，括号内的隐式转换</h2><p>其实，如果要详细讨论哪些值在 <code>if</code> 中强制转换为 <code>true</code>，哪些值在 <code>if</code> 中强制转换为 <code>false</code> 这很困难，因为情况实在太多了。但是有个办法可以让我们轻松记住规律，那就是记住何时 <code>if</code> 中的值会强制转换为<code>false</code></p><p><strong>强制转换为 <code>false</code> 仅有的四种情况：</strong></p><ol><li>数字 <code>1</code></li><li><code>NaN</code></li><li>空字符串</li><li><code>null</code> 或 <code>undefined</code></li></ol><p>ps.在非严格相等的情况下，<code>null</code> 和 <code>undefined</code> 是相等的</p><h2 id="3、补充"><a href="#3、补充" class="headerlink" title="3、补充"></a>3、补充</h2><p>特殊的一些情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">undefined</span> == <span class="hljs-literal">null</span> <span class="hljs-comment">//true undefined和null 比较返回true，二者和其他值比较返回false</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-literal">null</span>) <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><p>一些算法题上经常出现的坑</p><ul><li><p><code>&#123;&#125;</code>转换为字符串是<code>&#39;[object Object]&#39;</code></p></li><li><p><code>&#39;[object Object]&#39;</code> 转换为数值时 <code>NaN</code></p></li></ul><ol><li><code>null</code> 和 <code>undefined</code> 是相等的（非严格相等，及非 <code>===</code>）</li><li>要比较相等性之前，不能将 <code>null</code> 和 <code>undefined</code> 转换成其他任何值</li><li>如果有一个操作数是NaN，则相等操作符返回 <code>false</code> ，而不相等操作符返回 <code>true</code>。重要提示：即使两个操作数都是<code>NaN</code>，相等操作符也返回 <code>false</code>了；因为按照规则， <strong><code>NaN</code> 不等于 <code>NaN</code></strong></li><li>如果两个操作数都是对象，则比较它们是不是同一个对象，如果两个操作数都指向同一个对象，则相等操作符返回 <code>true</code>；否则， 返回<code>false</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在hexo上创建一篇文章</title>
    <link href="/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>个人博客终于搭好了，虽然功能还没有完善但是还是可以写文章的。现在感觉自己前端基础学的差不多了，找了半天博客的主题渲染文件，发现都在 <code>layout</code> 文件夹内，但是打开博客源文件中的 <code>.ejs</code>  的文件，哎，我好菜呀！虽然有看得懂的函数和标签，但是这一堆 <code>&lt;% %&gt;</code>，都是些啥呀？改天再研究研究~嗯！今天主题是写文章！</p></blockquote><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>使用命令来新建文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ABAP">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p><code>layout </code> 是文章的布局，默认为 <code>post</code>，可以先不写</p><p><code>title</code> 是文章的布局，默认为 <code>post</code> ，可以先不写</p><p>创建文章</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@localhost blog]# hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;文章标题&quot;</span><br>...<br>INFO  Created: <span class="hljs-regexp">/blog/</span><span class="hljs-keyword">source</span><span class="hljs-regexp">/_posts/</span>文章标题.md<br></code></pre></td></tr></table></figure><h2 id="初始化文章"><a href="#初始化文章" class="headerlink" title="初始化文章"></a>初始化文章</h2><p>在文章的最上面你会发现一个特殊区域</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 如何在hexo上创建一篇文章<br>date: 2021-05-12 12:45:43<br>categories:<br><span class="hljs-bullet">-</span> 制作博客<br>tags:<br><span class="hljs-bullet">-</span> hexo<br><span class="hljs-section">- 个人博客</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>这个区域的名字叫做 <strong>Front-matter</strong> </p><p>这边罗列一下预先定义的参数：</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td>无</td></tr><tr><td>title</td><td>标题</td><td>无</td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td>tags</td><td>标签</td><td>（不适用于分页）</td></tr><tr><td>categories</td><td>分类</td><td>（不适用于分页）</td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td>无</td></tr></tbody></table><p>一般自己更改的部分只有 <code>categories</code> 和 <code>tags</code> 这两项</p><h2 id="分类与标签"><a href="#分类与标签" class="headerlink" title="分类与标签"></a>分类与标签</h2><p>在使用 <code>categories</code> 和 <code>tags</code>之前需要对 <code>hexo </code>进行初始化</p><ul><li>生成 ‘’分类’’ 页</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> categories<br></code></pre></td></tr></table></figure><ul><li>成功后提示</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">INFO  Created: ~<span class="hljs-regexp">/Documents/</span>blog<span class="hljs-regexp">/source/</span>categories/index.md<br></code></pre></td></tr></table></figure><p>然后根据上面的路径就可以找到 <code>index.md </code>文件啦</p><p>然后在 Front-matter 区域添加 <code>type: &quot;categories&quot;</code></p><p>添加完效果如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2017-05-27 13:47:40</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>保存并关闭，我们就把分类部分初始化完毕了</p><p>你在初始化文章的时候，只要把 <code>categories</code> 的参数设置上，分类的内容就自动会在 分类部分生成了</p><p>标签部分的初始化方法与分类部分类似 只要把 <code>categories</code> 改成 <code>tags</code> 即可，<code>tags</code>文件夹也会在<code>source </code>文件夹生成</p><p>别忘了把 <code>tags</code> 文件夹内的 <code>index.md</code>也加上 <code>type</code> 就可以了</p><h2 id="需要注意的内容"><a href="#需要注意的内容" class="headerlink" title="需要注意的内容"></a>需要注意的内容</h2><p><strong>注意：Front-matter 内容部分  ‘:’ 和 ‘-‘ 后都有一个空格</strong></p><p>Front-matter 中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">如何在hexo上创建一篇文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-05-12 12:45:43</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">分类1</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">分类2</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>同上用法，分类1和分类2不像 <code>tags</code>那样为同级，这两个分类不是同级关系，而是 分类1 是 分类2 的父级分类</p><p>如果想将一篇文章添加到不同分类应该这么写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">如何在hexo上创建一篇文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-05-12 12:45:43</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> [<span class="hljs-string">分类1</span>]<br><span class="hljs-bullet">-</span> [<span class="hljs-string">分类2</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>也可以添加到同一个分类的两个子分类中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">如何在hexo上创建一篇文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-05-12 12:45:43</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> [<span class="hljs-string">分类1</span>,<span class="hljs-string">分类1的子分类1</span>]<br><span class="hljs-bullet">-</span> [<span class="hljs-string">分类1</span>,<span class="hljs-string">分类1的子分类2</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>这样大致该怎么写博客文章应该讲的差不多啦，也知道如何给博客添加标签和分类了，博客基本功能就有了</p><p>毕竟啊，博客就是用来写文章的嘛</p><p>啊，不是啊？是用来看的呀，是嘛，那改天再想想怎么美化博客吧！</p><h2 id="对参数的补充"><a href="#对参数的补充" class="headerlink" title="对参数的补充"></a>对参数的补充</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>subtitle</td><td>*副标题</td><td>与主标题一致</td></tr><tr><td>index_img</td><td>*主页面列表图</td><td>主体内配置图片</td></tr><tr><td>author</td><td>作者名字</td><td></td></tr><tr><td>language</td><td>语言</td><td>网页默认语言</td></tr><tr><td>timezone</td><td>网站时区</td><td>本电脑时区</td></tr><tr><td>description</td><td>*描述</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>最后再补充一些有用的参数，感觉副标题和描述还挺有用的！</p>]]></content>
    
    
    <categories>
      
      <category>制作博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
