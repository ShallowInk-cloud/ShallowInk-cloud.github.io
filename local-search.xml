<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="什么是正则表达式"><a href="#什么是正则表达式" class="headerlink" title="什么是正则表达式"></a>什么是正则表达式</h2><ul><li>正则表达式：（Regular Expression）用于匹配规律规则的表达式，正则表达式最初是科学家对人类神经系统的工作原理的早期研究，现在在编程语言中有广泛的应用。正则表达通常被用来检索、替换那些符合某个模式（规则）的文本</li><li>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑</li></ul><h2 id="正则表达式的作用"><a href="#正则表达式的作用" class="headerlink" title="正则表达式的作用"></a>正则表达式的作用</h2><ol><li>给定字符串是否符合正则表达式的过滤逻辑（匹配）</li><li>可以通过正则表达式，从字符串中获取我们想要的特定部分（提取）</li><li>强大的字符串替换能力（替换）</li></ol><p>**正则表达式在线测试(包含规则)**：<a href="https://c.runoob.com/front-end/854">https://c.runoob.com/front-end/854</a></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><p>在 JavaScript 中，正则表达式也是对象，是一种索引类型</p></li><li><p>使用一个正则表达式字面量是最简单的方式。两个 / 是正则表达式的定界符</p></li><li><p>你可以通过下面两种方法创建一个正则表达式</p></li><li><p>使用一个正则表达式字面量，如下图所示：</p></li></ul><p><code>var reg = /abc/;</code></p><p>正则表达式字面量在脚本加载后编译。若你的正则表达式是常量，使用这种方式可以获得更好的性能</p><ul><li>调用 RegExp 对象的构造函数，如下所示：</li></ul><p><code>var re = new RegExp(&quot;abc&quot;);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 字面量方式创建正则表达式</span><br><span class="hljs-keyword">var</span> reg1 = <span class="hljs-regexp">/abc/</span>;<br><span class="hljs-comment">// 通过构造函数 创建</span><br><span class="hljs-keyword">var</span> reg2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&quot;abc&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="正则表达式的组成"><a href="#正则表达式的组成" class="headerlink" title="正则表达式的组成"></a>正则表达式的组成</h3><p>由一些普通字符和一些特殊字符（又叫元字符–<code>metacharacters</code>）组成。普通字符包括大小写的字母和数字，而元字符则具有特殊含义。</p><p>特殊字符：JavaScript 中常用特殊字符有 <code>() [] &#123;&#125; \ ^ $ | ? * +</code></p><p>若想匹配这类字符必须用转义符号 \ 如：<code>\(、\^、\\</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">\t <span class="hljs-comment">//制表符</span><br>\n <span class="hljs-comment">//回车符</span><br>\f <span class="hljs-comment">//换页符</span><br>\b <span class="hljs-comment">//词边界</span><br>\s <span class="hljs-comment">//空白</span><br>+ <span class="hljs-comment">//后面可以有任意连续单字符</span><br><span class="hljs-regexp">/\s/g</span> <span class="hljs-comment">//全局修饰符（在正则表达式后添加，匹配其中所有符合条件的内容）</span><br></code></pre></td></tr></table></figure><h2 id="相关正则方法"><a href="#相关正则方法" class="headerlink" title="相关正则方法"></a>相关正则方法</h2><ul><li>字符串方法：</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>split()</td><td>根据匹配字符串切割父字符串</td></tr><tr><td>match()</td><td>使用正则表达式与字符串相比较，返回第一个出现结果的数组</td></tr><tr><td>search()</td><td>对正则表达式或指定字符串进行搜索，返回第一个出现的匹配项的下标</td></tr></tbody></table><ul><li>正则表达式方法：</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>exec()</td><td>在目标字符串中执行一次正则匹配操作</td></tr><tr><td>text()</td><td>测试当前正则是否能匹配目标字符串</td></tr></tbody></table><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><h4 id="String-split"><a href="#String-split" class="headerlink" title="String: split"></a>String: split</h4><ul><li><p>根据匹配字符串切割父字符串</p><p>eg:根据空格切割字符串：<code>&#39;aa bbb   c dd eeeeee &#39;</code></p><p><strong>模糊匹配分割</strong> </p><p><code>&#39;aa bbb   c dd eeeeee &#39;.split(/\s+/)</code></p><p><code>=&gt; [&quot;aa&quot;,&quot;bbb&quot;,&quot;c&quot;,&quot;dd&quot;,&quot;eeeeee&quot;]</code></p><p>分割字符串成为数组</p><p>练习根据字母 a 切割字符串 <code>&quot;bbaacaaaadddaeeeeeeaaf&quot;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;bbaacaaaadddaeeeeeeaaf&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(str.split(<span class="hljs-regexp">/a+/</span>));<br></code></pre></td></tr></table></figure></li></ul><h4 id="String-search"><a href="#String-search" class="headerlink" title="String: search"></a>String: search</h4><ul><li><p>寻找匹配字符串在父字符串中的位置</p><p>eg：在 <code>&#39;abcdefg&#39;</code> 中寻找 <code>&#39;cd&#39;</code> 的位置</p><p><code>&#39;abcdefg&#39;.search(/cd/)</code></p><p><code>=&gt; 2</code></p><p>练习：在字符串 <code>&#39;aaaa o o bbb aaa&#39;</code> 中寻找 <code>&#39;o o&#39;</code>的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;aaaa o o bbb aaa&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(str.search(<span class="hljs-regexp">/o o/</span>));<span class="hljs-comment">//5</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="String-match"><a href="#String-match" class="headerlink" title="String: match"></a>String: match</h4><pre><code>- 在父字符串中寻找匹配字符串  在 `&#39;abbcccbbbbbddbbbdabbbb&#39;`中查询重复的 `&#39;b&#39;` 字符串  `&#39;abbcccbbbbbddbbbdabbbb&#39;.match(/b+/g)`  `=&gt; [&quot;bb&quot;,&quot;bbbbb&quot;,&quot;bbb&quot;,&quot;bbbb&quot;]`  练习：`&#39;aaaa o o bbb o    o aaa&#39;`找寻所有 `&#39;o  o&#39;`字符串</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">str = <span class="hljs-string">&#x27;aaaa o o bbb o    o aaa&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(str.match(<span class="hljs-regexp">/o\s+o/g</span>));<br></code></pre></td></tr></table></figure><h4 id="String-replace"><a href="#String-replace" class="headerlink" title="String: replace"></a>String: replace</h4><ul><li><p>替换父字符串中匹配字符串</p><p>eg：将’<code>www.hello.com</code>‘替换成’<code>www.byebye.com</code>‘</p><p><code>&#39;www.hello.com&#39;.replace(/hello/,&#39;byebye&#39;)</code></p><p><code>=&gt;&quot;www.byebye.com&quot;</code></p><p>练习：过滤字符串中空格：<code> &#39;aa b cd e f&#39; =&gt; &quot;aabcdef&quot;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;aa b cd e f&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(str.replace(<span class="hljs-regexp">/\s/g</span>,<span class="hljs-string">&#x27;&#x27;</span>));<br></code></pre></td></tr></table></figure></li></ul><h3 id="正则表达式方法"><a href="#正则表达式方法" class="headerlink" title="正则表达式方法"></a>正则表达式方法</h3><h4 id="RegExp-exec"><a href="#RegExp-exec" class="headerlink" title="RegExp: exec"></a>RegExp: exec</h4><ul><li><p>在字符串中寻找匹配字符串，该方法比其他正则方法或字符串方法支持的更复杂</p><p><strong>无论加不加全局修饰符 g 都会在找到第一个之后停止</strong> </p><p>eg：在<code>&#39;aaaabccccbacabc&#39;</code>中查找<code>&#39;abc&#39;</code>字符串</p><p><code>var result = /abc/.exec(&#39;aaaabccccbacabc&#39;);</code></p><p>result =&gt; [“abc”]</p><p>result.index =&gt; 3</p><p>练习：在<code>&#39;ooooo O O oooooooooo&#39;</code>字符串中匹配<code>[&quot;o O O o&quot;]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result = <span class="hljs-regexp">/oo\sO\sO\soo/</span>.exec(<span class="hljs-string">&#x27;ooooo O O oooooooooo&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(result);<br><span class="hljs-built_in">console</span>.log(result.index);<span class="hljs-comment">//3</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="RegExp-test"><a href="#RegExp-test" class="headerlink" title="RegExp: test"></a>RegExp: test</h4><ul><li><p>监测字符串是否匹配正则表达式</p><p>eg:判断<code>&#39;aaddccddabcddeeddfff&#39;</code>是否包含<code>&#39;abc&#39;</code>字符串</p><p><code>/abc/.test(&#39;aaddccddabcddeeddfff&#39;)</code></p><p><code>=&gt; true</code></p><p>练习：检测<code>&#39;a bc&#39;</code>和<code>&#39;abc&#39;</code>是否包含空格</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;a bc&#x27;</span>;<br><span class="hljs-keyword">var</span> str2 = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-keyword">var</span> result1 = <span class="hljs-regexp">/\s/</span>.test(str1);<br><span class="hljs-keyword">var</span> result2 = <span class="hljs-regexp">/\s/</span>.test(str2);<br><span class="hljs-built_in">console</span>.log(result1,result2);<br></code></pre></td></tr></table></figure><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>简单类：正则的多个字符对应一个字符，我们可以用 [] 把他们括起来，让 [] 这个整体对应一个字符 <code>[abc]</code></p><p>例子：<code> o[usb]t =&gt; obt、ost、out</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 简单类： 多个可能匹配字符连续书写在一起，只要其中一个匹配成功即可</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[abc]/</span>;<span class="hljs-comment">//abc中有一个存在就可以匹配成功</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;egsbc&#x27;</span>));<br></code></pre></td></tr></table></figure><p>范围类：有时匹配的东西过多，而且类型又相同，全部输入太麻烦，我们可以在中间加一个横线。[a-z]、[0-9]、[A-Z]</p><p>例子： <code>id[0-9]t =&gt; id0 、 id5</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 范围类</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[0-9]/</span>;<span class="hljs-comment">//0-9之内有一个数字则匹配成功</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;auhw1uhj&#x27;</span>));<br></code></pre></td></tr></table></figure><p>负向类： [] 前面加个元字符进行取反，表示匹配不能为括号里面的字符。<code>[^a]</code></p><p>例子：<code>o[^0-9]t =&gt; oat、o?t、o t</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 负向类：[]前面加个元字符进行取反，表示匹配不能为括号里面的字符。[^a]</span><br><span class="hljs-keyword">var</span> reg1 =  <span class="hljs-regexp">/[^0-9]/</span>;<span class="hljs-comment">//不是只有数字则匹配成功</span><br><span class="hljs-built_in">console</span>.log(reg1.test(<span class="hljs-string">&#x27;1asd&#x27;</span>));<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>组合类：允许用中括号匹配不同类型的单个字符。<code>[0-9a-b]</code></p><p>例子：<code>o[0-9a-b]t =&gt; oat、o?t、o</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 组合类</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[0-9a-z]/</span>;<span class="hljs-comment">//有数字和小写字母则匹配成功</span><br><span class="hljs-comment">// var reg = /[0-Z]/;//数字和大写字母</span><br><span class="hljs-built_in">console</span>.log(reg.test(<span class="hljs-string">&#x27;A&#x27;</span>));<br></code></pre></td></tr></table></figure><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="g修饰符"><a href="#g修饰符" class="headerlink" title="g修饰符"></a>g修饰符</h3><p>可以实现全局查找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;aaahsjjjihajjwdjjjaiwjdijjjjsj&#x27;</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/j+/g</span>;<br><span class="hljs-built_in">console</span>.log(str.match(reg));<br></code></pre></td></tr></table></figure><h3 id="i修饰符"><a href="#i修饰符" class="headerlink" title="i修饰符"></a>i修饰符</h3><p>字母大小写可以不敏感</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;aaahsjJjihajjwdJjjaiwjdiJJjjsj&#x27;</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/j+/ig</span>;<br><span class="hljs-built_in">console</span>.log(str.match(reg));<br></code></pre></td></tr></table></figure><h2 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h2><ul><li><p><code>^ </code>开头 —注意不能紧跟左中括号的后面，不然就是取反了</p><p><code>/^hello/.test(&#39;hello javascript&#39;) =&gt; true</code></p><p><code>/^javascript/.test(&#39;hello javascript&#39;) =&gt; false</code></p></li><li><p><code>$</code>结尾</p><p><code>/javascript$/.test(&#39;hello javascript&#39;) =&gt; true</code></p><p><code>/hello$/.test(&#39;hello javascript&#39;) =&gt; false</code></p></li><li><p>实际应用中出现同时限制开头和结尾的情况</p></li></ul><p><code>/^hello\s+javascript$/.test(&#39;hello     javascript&#39;) =&gt; true</code></p><p><code>var result = /^hello[^\n]+javascript$/.test(&#39;hello   javascript&#39;) =&gt; true;</code></p><h2 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h2><table><thead><tr><th>表示方法</th><th>正则说明</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td><code>[^\n\r]</code></td><td>除了换行和回车之外的任意字符</td></tr><tr><td>\d</td><td><code>[0-9]</code></td><td>数字字符</td></tr><tr><td>\D</td><td><code>[^0-9]</code></td><td>非数字字符</td></tr><tr><td>\s</td><td><code>[\t\n\x0B\f\r]</code></td><td>空白字符</td></tr><tr><td>\S</td><td><code>[^\t\n\x0B\f\r]</code></td><td>非空白字符</td></tr><tr><td>\w</td><td><code>[a-zA-Z_0-9]</code></td><td>单词字符(所有的字母数字下划线)</td></tr><tr><td>\W</td><td><code>[^a-zA-Z_0-9]</code></td><td>非单词字符</td></tr></tbody></table><ul><li><p>\d =&gt; digital 数字 </p></li><li><p>\s =&gt; space 空白</p></li><li><p>\w =&gt; word 单词</p></li></ul><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><table><thead><tr><th>正则表示</th><th>性质</th><th>说明</th></tr></thead><tbody><tr><td>{n}</td><td>硬性量词</td><td>对应0次或者n次</td></tr><tr><td>{n,m}</td><td>软性量词</td><td>至少出现n次但不超过m次（中间不能有空格）</td></tr><tr><td>{n,}</td><td>软性量词</td><td>至少出现n次（+的升级版）</td></tr><tr><td>?</td><td>软性量词</td><td>出现0次或者1次</td></tr><tr><td>*</td><td>软性量词</td><td>出现0次或者多次（任意次）</td></tr><tr><td>+</td><td>软性量词</td><td>出现一次或多次（至少一次）</td></tr></tbody></table><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>虽然量词的出现，能帮助我们处理一排紧密相连的同类型字符。但是这还是不够的，我们用中括号表示范围内的选择，大括号表示重复次数。如果想获取重复多个字符，我们就要用小括号进行分组了。</p><p><code>/(bye)&#123;2&#125;/.test(&#39;byebye&#39;) =&gt; true</code></p><p><code>/(bye)&#123;2&#125;/.test(&#39;bye&#39;) =&gt; false</code></p><p><strong>反向引用</strong></p><p>反向引用表示是对正则表达式中的匹配组捕获的子字符串进行编号，通过 <code>“\编号(在表达式中)”</code></p><p><code>“$编号 (在表达式外) ”</code> 进行引用。从 1 开始计数</p><p><code>/(bye)\1/.test(&#39;byebye&#39;) =&gt; true</code></p><p><code>/(bye)\1/.test(&#39;bye&#39;)/ =&gt; false</code></p><p><code>&#39;123*456&#39;.replace(/(\d&#123;3&#125;)\*(\d&#123;3&#125;)/,&#39;$2*$1&#39;) =&gt;&quot;456*123&quot;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;123*456&#x27;</span>.replace(<span class="hljs-regexp">/(\d&#123;3&#125;)\*(\d&#123;3&#125;)/</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">match,$<span class="hljs-number">1</span>,$<span class="hljs-number">2</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> $<span class="hljs-number">2</span> + <span class="hljs-string">&#x27;*&#x27;</span> + $<span class="hljs-number">1</span><br>&#125;) <span class="hljs-comment">//456*123&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><ul><li><strong>或操作符</strong></li></ul><p>可以使用竖线 ( | ) 字符表示或者的关系</p><p><code>/a|bcd/</code>  — 匹配 1 或者 bcd 字符</p><p><code>/(ab)+|(cd)+/</code> — 匹配出现一次或多次的ab 或者 cd</p><p>匹配 ab 开头结尾或者 cd 开头结尾，且只能出现一者:</p><p><code>/^(ab|cd)$/</code></p><h2 id="中文字符"><a href="#中文字符" class="headerlink" title="中文字符"></a>中文字符</h2><p>匹配中文：[\u4e00-\u9fa5]</p><p><code>/[\u4e00-\u9fa5]+/.test(&#39;文本内容&#39;)    =&gt; true</code></p><p><code>/[\u4e00-\u9fa5]+/.test(&#39;aaa&#39;) =&gt; false</code></p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>继承</title>
    <link href="/%E7%BB%A7%E6%89%BF/"/>
    <url>/%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="继承和函数进阶"><a href="#继承和函数进阶" class="headerlink" title="继承和函数进阶"></a>继承和函数进阶</h1><h2 id="对象之间的继承"><a href="#对象之间的继承" class="headerlink" title="对象之间的继承"></a>对象之间的继承</h2><h3 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a><strong>什么是继承</strong></h3><ul><li>现实生活中的继承</li></ul><p>如：财产继承</p><ul><li>程序中的继承</li></ul><p>如：一个对象的属性和方法继承给另外一个对象</p><h3 id="如何实现继承"><a href="#如何实现继承" class="headerlink" title="如何实现继承"></a><strong>如何实现继承</strong></h3><h4 id="对象拷贝继承"><a href="#对象拷贝继承" class="headerlink" title="对象拷贝继承"></a>对象拷贝继承</h4><p><code>for... in</code>：父对象的属性拷贝给子对象</p><p>利用对象拷贝封装一个继承函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">extent</span> (<span class="hljs-params">parent,child</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> parent) &#123;<br>        <span class="hljs-keyword">if</span> (child[k]) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        child[k] = parent[k];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="原型对象继承"><a href="#原型对象继承" class="headerlink" title="原型对象继承"></a>原型对象继承</h4><p>利用构造函数的原型对象来实现继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 封装构造函数创建类对象</span><br><span class="hljs-comment">// 继承指的是，类型与类型之间的继承</span><br><span class="hljs-comment">// 学生类型 老师类型</span><br><br><span class="hljs-comment">// 人类类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">name,age,sex</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br><br><span class="hljs-comment">// 学生类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span> (<span class="hljs-params">score</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.score = score;<br>&#125;<br><span class="hljs-comment">// 老师类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span> (<span class="hljs-params">salary</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.salary = salary;<br>&#125; <br><span class="hljs-comment">//*</span><br>Student.prototype = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;男&#x27;</span>);<br>Student.prototype.constructor = Student;<br><span class="hljs-comment">// 原型对象，可以将自己的属性和方法继承给将来的实例对象使用</span><br><span class="hljs-keyword">var</span> s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">70</span>);<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-number">80</span>);<br><span class="hljs-built_in">console</span>.log(s1);<br><span class="hljs-built_in">console</span>.log(s2);<br><span class="hljs-built_in">console</span>.log(s1.name);<span class="hljs-comment">//&#x27;zs&#x27;</span><br><span class="hljs-built_in">console</span>.log(s1.age);<span class="hljs-comment">//20</span><br><span class="hljs-built_in">console</span>.log(s2.constructor);<span class="hljs-comment">//Student构造函数</span><br></code></pre></td></tr></table></figure><h4 id="构造函数属性继承"><a href="#构造函数属性继承" class="headerlink" title="构造函数属性继承"></a>构造函数属性继承</h4><p>ps.call函数知识补充</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// call</span><br><span class="hljs-comment">// 函数本身就是一种对象，就能够有自己的属性和方法</span><br><span class="hljs-comment">// call 方法 本身是一种执行函数的方法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params">a,b</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    <span class="hljs-built_in">console</span>.log(a + b);<br>&#125;<br><span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span><br>&#125;<br><span class="hljs-comment">// 普通函数调用</span><br>foo(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">// window 对象 , 5</span><br><span class="hljs-comment">// call 方法在调用函数的时候有两个功能</span><br><span class="hljs-comment">// 1.更改函数内部的 this 指向</span><br><span class="hljs-comment">// 2.调用函数执行内部代码</span><br><span class="hljs-comment">// call 中 第一个参数是用来指定 this 的，第二个及以后参数就是函数本身的传参</span><br>foo.call(o,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>然后我们就可以拿 call 函数更改函数 this 对象，来实现构造函数属性继承了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 构造函数属性继承</span><br><span class="hljs-comment">// 人类类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">name,age,sex</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br><br><span class="hljs-comment">// 学生类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span> (<span class="hljs-params">name,age,sex,score</span>) </span>&#123;<br>    <span class="hljs-comment">//*</span><br>    Person.call(<span class="hljs-built_in">this</span>,name,age,sex);<br>    <span class="hljs-built_in">this</span>.score = score;<br>&#125;<br><span class="hljs-comment">// 老师类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span> (<span class="hljs-params">name,age,sex,salary</span>) </span>&#123;<br>    <span class="hljs-comment">//*</span><br>    Person.call(<span class="hljs-built_in">this</span>,name,age,sex);<br>    <span class="hljs-built_in">this</span>.salary = salary;<br>&#125;<br><span class="hljs-comment">// 创建一个实例对象</span><br><span class="hljs-keyword">var</span> s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">90</span>);<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;ls&#x27;</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">93</span>);<br><span class="hljs-built_in">console</span>.log(s1,s2);<br></code></pre></td></tr></table></figure><p>并且这种方法也没有更改原型对象，还是挺舒服的</p><h4 id="构造函数原型方法继承"><a href="#构造函数原型方法继承" class="headerlink" title="构造函数原型方法继承"></a>构造函数原型方法继承</h4><p><strong>拷贝继承</strong></p><p>拷贝一份父级原型对象，到子级原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 构造函数属性继承</span><br><span class="hljs-comment">// 人类类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">name,age,sex</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br><span class="hljs-comment">// 构造函数原型中也有方法需要继承</span><br>Person.prototype.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hi!Baby~&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// *子类型的原型对象上，需要继承父类型原型对象的方法</span><br><span class="hljs-comment">// 对象拷贝与继承</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> Person.prototype) &#123;<br>    <span class="hljs-comment">// 保留自己的 constructor 不用进行继承</span><br>    <span class="hljs-keyword">if</span> (k === <span class="hljs-title">constructor</span>) &#123;<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    Student.prototype[k] = Person.prototype[k];<br>&#125;<br><span class="hljs-comment">// 学生类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span> (<span class="hljs-params">name,age,sex,score</span>) </span>&#123;<br>    Person.call(<span class="hljs-built_in">this</span>,name,age,sex);<br>    <span class="hljs-built_in">this</span>.score = score;<br>&#125;<br><span class="hljs-comment">// 创建一个实例对象</span><br><span class="hljs-keyword">var</span> s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">90</span>);<br><span class="hljs-comment">// 调用 sayHi 方法</span><br>s1.sayHi();<br></code></pre></td></tr></table></figure><p><strong>原型继承</strong></p><p>直接将父级原型对象，替换掉子级原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 构造函数原型继承</span><br><span class="hljs-comment">// 人类类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">name,age,sex</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sex = sex;<br>&#125;<br><span class="hljs-comment">// 构造函数原型中也有方法需要继承</span><br>Person.prototype.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hi!Baby~&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 直接原型对象继承</span><br>Student.prototype = Person.prototype;<br>Student.prototype.constructor = Student;<br><br><span class="hljs-comment">// 学生类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Student</span> (<span class="hljs-params">name,age,sex,score</span>) </span>&#123;<br>    Person.call(<span class="hljs-built_in">this</span>,name,age,sex);<br>    <span class="hljs-built_in">this</span>.score = score;<br>&#125;<br><span class="hljs-comment">// 创建一个实例对象</span><br><span class="hljs-keyword">var</span> s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-number">90</span>);<br><span class="hljs-comment">// 调用 sayHi 方法</span><br>s1.sayHi();<br></code></pre></td></tr></table></figure><h4 id="组合继承（综合继承方式）"><a href="#组合继承（综合继承方式）" class="headerlink" title="组合继承（综合继承方式）"></a>组合继承（综合继承方式）</h4><p>组合继承：属性在构造函数内部继承，方法通过原型继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 人类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">age,name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-comment">// 人类型原型中的一个方法</span><br>Person.prototype.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Hi!Student~&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 老师类型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Teacher</span>(<span class="hljs-params">age,name,salary</span>) </span>&#123;<br><span class="hljs-comment">// 老师类型继承人类型的属性，在构造函数内部进行继承</span><br>    Person.call(<span class="hljs-built_in">this</span>,age,name);<br>    <span class="hljs-built_in">this</span>.salary;<br>&#125;<br><span class="hljs-comment">//  老师类型继承人类型的方法，通过原型继承</span><br>Teacher.prototype = Person.prototype;<br>Teacher.prototype.constructor = Teacher;<br><br><span class="hljs-comment">// 生成一个老师对象的实例</span><br><span class="hljs-keyword">var</span> t1 = <span class="hljs-keyword">new</span> Teacher(<span class="hljs-number">33</span>,<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-string">&#x27;30k&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(t1);<br>t1.sayHi();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>继承</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数进阶</title>
    <link href="/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/"/>
    <url>/%E5%87%BD%E6%95%B0%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h1><h2 id="回顾函数的定义方式"><a href="#回顾函数的定义方式" class="headerlink" title="回顾函数的定义方式"></a>回顾函数的定义方式</h2><ul><li>函数声明</li></ul><p>ps.可以在函数声明之前调用函数，因为 function 声明会提升</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;声明函数必须定义函数名&quot;</span>);<br>&#125;<br>foo();<br></code></pre></td></tr></table></figure><ul><li>函数表达式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fun = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;函数表达式声明函数&quot;</span>);<br>&#125;<br>fun();<br></code></pre></td></tr></table></figure><ul><li>构造函数 new Function</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Fn</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-built_in">this</span>.a = a;<br>&#125;<br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">var</span> Fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.a = a;<br>&#125;<br><span class="hljs-comment">//但是调用构造函数必须：</span><br><span class="hljs-keyword">var</span> f1 = <span class="hljs-keyword">new</span> Fn(a);<br><br></code></pre></td></tr></table></figure><h2 id="函数声明与函数表达式的区别"><a href="#函数声明与函数表达式的区别" class="headerlink" title="函数声明与函数表达式的区别"></a>函数声明与函数表达式的区别</h2><ul><li>函数声明必须有名字</li><li>函数声明会函数提升，在预解析阶段就已创建，声明前后都可以调用</li><li>函数表达式类似于给变量赋值</li><li>函数表达式可以没有名字，例如匿名函数</li><li>函数表达式没有函数提升（只有变量声明提升），在执行阶段创建，必须在表达式创建之后才可以调用</li></ul><p>结论：推荐使用函数声明方式进行对函数定义</p><h2 id="函数声明提升拓展"><a href="#函数声明提升拓展" class="headerlink" title="函数声明提升拓展"></a>函数声明提升拓展</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 提前调用</span><br><span class="hljs-comment">// fn(); 现代浏览器会判断 if 作用域内函数只进行变量声明提升而报错，不能函数声明提升</span><br><span class="hljs-built_in">console</span>.log(fn);<span class="hljs-comment">//现代浏览器输出 undefined</span><br><span class="hljs-comment">// 进行 if 语句的函数声明提升</span><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;fn-true&#x27;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;fn-false&#x27;</span>);<br>    &#125;<br>&#125;<br>fn();<br></code></pre></td></tr></table></figure><p>在现代浏览器中 if  块级作用域内的函数声明不会提升，而只会执行变量提升，因此：</p><blockquote><p>在函数声明前调用函数会直接报错 – xxx 不是一个函数</p><p>在函数声明前输出函数变量值内容 为 <code>undefined</code></p><p>结论：只进行了 变量的提升</p></blockquote><p>在现代浏览器中 上述代码结果为 <code>fn-true</code></p><p>而在老版本浏览器中上述代码结果为 <code>fn-false</code></p><p>原因：新版本浏览器遭受了块级作用域的限制，而老版本浏览器没有限制进行了函数声明提升</p><p>以下是<strong>兼容</strong>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fn;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;fn-true&#x27;</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    fn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;fn-false&#x27;</span>);<br>    &#125;<br>&#125;<br>fn();<br></code></pre></td></tr></table></figure><p>这样一来就不存在函数声明提升导致的新老版本浏览器结果不同的情况了</p><h2 id="通过构造函数的方式定义函数"><a href="#通过构造函数的方式定义函数" class="headerlink" title="通过构造函数的方式定义函数"></a>通过构造函数的方式定义函数</h2><p>这边再来补充一种完全不会用到的定义函数方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 函数本身也是一种对象</span><br><span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span> (<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;var a = 1; console.log(a + b);&#x27;</span>);<br>fun(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.dir(fun);<br></code></pre></td></tr></table></figure><p>emmmm….over！知道即可</p><h2 id="函数的调用以及-this-的指向"><a href="#函数的调用以及-this-的指向" class="headerlink" title="函数的调用以及 this 的指向"></a>函数的调用以及 this 的指向</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.普通的函数，是通过 给函数名或者变量名添加 () 方式执行的</span><br><span class="hljs-comment">// 内部的 this 指向 window</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);<br>&#125;<br>fun();<br><span class="hljs-comment">//2. 构造函数，是通过 new 关键字进行调用</span><br><span class="hljs-comment">// 内部的 this 指向 将来创建的实例对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">var</span> p1 = Person(<span class="hljs-string">&#x27;zs&#x27;</span>);<br><span class="hljs-comment">// 3.对象中的方法，通过对象打点调用函数，然后加小括号</span><br><span class="hljs-comment">// 内部 this 默认指向我们调用的对象自己</span><br><span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-attr">sayHi</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;haha&#x27;</span>);<br>    &#125;<br>&#125;<br>o.sayHi();<br><span class="hljs-comment">// 4.事件函数，不需要加特殊符号执行，只要事件被触发它就会自动执行函数</span><br><span class="hljs-comment">// 内部 this 指向触发事件的事件源</span><br><span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;事件&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 5.定时器和延时器中的函数，不需要加特殊符号，只要执行后，在规定时间自动执行</span><br><span class="hljs-comment">// 内部 this 默认指向window</span><br><span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;time&#x27;</span>);<br>&#125;,<span class="hljs-number">1000</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;stop&#x27;</span>);<br>&#125;,<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><p><strong>函数内 this 指向的不同场景</strong></p><ul><li>函数的调用方式决定了 this 指向的不同：</li></ul><p>函数调用方式不同，this 指向就不一样</p><table><thead><tr><th>调用方式</th><th>非严格模式</th><th>备注</th></tr></thead><tbody><tr><td>普通函数调用</td><td>window</td><td>严格模式下是 undefined</td></tr><tr><td>构造函数调用</td><td>实例对象</td><td>原型方法中 this 也是实例对象</td></tr><tr><td>对象方法调用</td><td>该方法所处对象</td><td>紧挨着的对象</td></tr><tr><td>事件绑定的方法</td><td>绑定事件的对象</td><td></td></tr><tr><td>定时器函数</td><td>window</td><td></td></tr></tbody></table><h2 id="函数原型对象上的方法"><a href="#函数原型对象上的方法" class="headerlink" title="函数原型对象上的方法"></a>函数原型对象上的方法</h2><h3 id="call-方法"><a href="#call-方法" class="headerlink" title="call( )方法"></a>call( )方法</h3><p><strong>call( )方法</strong></p><ul><li><p>call( )方法调用一个函数，其具有一个指定的 this 值和分别地提供的参数（参数列表）</p><ul><li>注意：该方法的作用和 apply( ) 方法类似，只有一个区别，就是 call( ) 方法接受的是若干个参数的列表，而 apply( )方法接受的是一个包含多个参数的数组</li><li>语法：</li></ul><p>fun.call(thisArg,arg1,arg2,arg3,…)</p><ul><li>thisArg</li></ul><p>在 fun 函数运行时指定的 this 值</p><p>如果指定了 null 或者 undefined 则内部 this 指向 window</p><ul><li>arg1,arg2,…</li></ul><p>指定的参数列表</p><p><strong>call方法应用–给类数组加入属性</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// &#123;&#125; 的对象自身没有 push 类似的方法</span><br><span class="hljs-comment">// 类数组对象 类似于 getElementsByTagName</span><br><span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-number">0</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-number">1</span>: <span class="hljs-number">20</span>,<br>    <span class="hljs-number">2</span>: <span class="hljs-number">30</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br>&#125;<br><span class="hljs-comment">// 检测下能否正常输出，由于标识符不能为数字开头 所以不能 o.0 进行调用</span><br><span class="hljs-built_in">console</span>.log(o[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">// 利用数组中的 push 方法，指定内部的 this 对象 o，就可以处理类数组对象的数据</span><br><span class="hljs-built_in">Array</span>.prototype.push.call(o,<span class="hljs-number">50</span>);<br><span class="hljs-built_in">console</span>.log(o);<br></code></pre></td></tr></table></figure></li></ul><h3 id="apply-方法"><a href="#apply-方法" class="headerlink" title="apply( )方法"></a>apply( )方法</h3><p><strong>apply( )方法</strong></p><ul><li>apply( ) 方法调用一个函数，第一个参数是一个指定的 this 值，第二个参数是以一个数组（或类似数组的对象）形式提供的参数</li><li>注意：该方法的作用和 call( ) 方法类似，只有一个区别，就是 call( ) 方法接受的若干个参数的列表，而 apply( ) 方法接受的是一个包含多个参数的数组</li><li>语法</li></ul><p>fun.apply(thisArg,[argsArray])</p><p><strong>apply 方法应用–快速求数组最大值以及把数组转化为数字呈现</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义一个数组，利用 apply 方法 ，可以将它拆开进行操作</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>];<br><span class="hljs-comment">// 利用 apply 方法，将数组传给 max 的第二个参数</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-built_in">Math</span>,arr));<br><span class="hljs-comment">// 利用 apply 方法，将数组内容呈数字展示出来</span><br><span class="hljs-built_in">console</span>.log.apply(<span class="hljs-built_in">console</span>,arr);<br></code></pre></td></tr></table></figure><h3 id="bind-方法"><a href="#bind-方法" class="headerlink" title="bind( )方法"></a>bind( )方法</h3><ul><li>bind( ) 函数会创建一个新函数（称为绑定函数），新函数与被调函数（绑定函数的目标函数）具有相同的函数体（在 ECMAScript 5 规范中内置的 call 属性）</li><li>当目标函数被调用时 this 值绑定到 bind( ) 的第一个参数，该参数不能被重写。绑定函数被调用时，bind( ) 也接受预设的参数提供给原函数</li><li>一个绑定函数也能使用 new 操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数</li><li>语法：</li></ul><p>fun.bind(thisArg,arg1,arg2,arg3,…)</p><p><strong>bind方法应用–更改定时器，延时器，事件函数中的 this</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 想修改定时器的函数内的 this （不需要执行函数的情况）</span><br><span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">s</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);        <br>        &#125;.bind(<span class="hljs-built_in">this</span>),<span class="hljs-number">1000</span>);    &#125;&#125;<br>o.s();<span class="hljs-comment">// 更改事件函数中的 this</span><br><span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>);<br>    &#125;.bind(o);<br></code></pre></td></tr></table></figure><h2 id="函数的其他成员"><a href="#函数的其他成员" class="headerlink" title="函数的其他成员"></a>函数的其他成员</h2><ul><li>arguments 实参集合</li><li>arguments.callee  函数本身，arguments的一个属性</li><li>fn.caller 函数的调用者，如何在全局调用，返回的调用者为 null</li><li>fn.length 形参的个数</li><li>fn.name 函数的名称</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 看一下函数内部的成员</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 实际应用中，会在函数内部直接使用 一个 arguments 的关键字</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>);<br>    <span class="hljs-comment">// 函数本身，直接用函数名调用即可，不需要使用 arguments.callee</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee);<br>    <span class="hljs-comment">// 以类数组方式来存储，函数传入的所有实参数据</span><br>    <span class="hljs-built_in">console</span>.log(foo.arguments);<br>    <span class="hljs-comment">// 函数的调用者，函数在哪个作用域调用，caller就是谁，如果在全局作用于，则值就是 null</span><br>    <span class="hljs-built_in">console</span>.log(foo.caller);<br>    <span class="hljs-comment">// 函数形参的个数</span><br>    <span class="hljs-built_in">console</span>.log(foo.length);<br>    <span class="hljs-comment">// 函数名称</span><br>    <span class="hljs-built_in">console</span>.log(foo.name);&#125;<br></code></pre></td></tr></table></figure><p>灵活使用 arguments 类数组对象，可以记录所有实参，来制作一个 max() 函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">max</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//判断参数中最大的数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Math</span>.max.apply(<span class="hljs-built_in">Math</span>,<span class="hljs-built_in">arguments</span>);<br>&#125;<br><span class="hljs-built_in">console</span>.log(max(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>));<br><span class="hljs-comment">// 啊哦，这好像不算制作 max() 函数，再来一遍</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">max</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">//判断参数中最大的数</span><br>    <span class="hljs-keyword">var</span> nowMax = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">arguments</span>.length; i++) &#123;<br>        <span class="hljs-built_in">arguments</span>[i] &gt; nowMax ? nowMax = <span class="hljs-built_in">arguments</span>[i] : <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nowMax;<br>&#125;<br><span class="hljs-built_in">console</span>.log(max(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>));<br></code></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><ul><li>函数可以作为参数</li><li>函数可以作为返回值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 高阶函数</span><br><span class="hljs-comment">// 1.函数作为另一个函数的参数</span><br><span class="hljs-comment">// 定义一个函数，吃饭函数，吃完饭之后，可以做其他的事情，看电影、聊天、看书</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eate</span> (<span class="hljs-params">fn</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;吃晚饭&#x27;</span>);<br>    <span class="hljs-comment">// 接下来的要做的事情是不固定</span><br>    fn();&#125;eate(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;看电影&#x27;</span>);<br>    &#125;)<br><span class="hljs-comment">// 2.函数作为一个函数的返回值</span><br><span class="hljs-comment">// 需求：通过同一段代码实现以下效果</span><br><span class="hljs-comment">// 输出： 100 + m</span><br><span class="hljs-comment">// 输出： 1000 + m</span><br><span class="hljs-comment">// 输出： 10000 + m</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span> (<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">m</span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(m + n);<br>    &#125;&#125;<br><span class="hljs-comment">// 在外部执行 inner 函数</span><br><span class="hljs-comment">// 100 + m</span><br><span class="hljs-keyword">var</span> fun = outer(<span class="hljs-number">100</span>);<br>fun (<span class="hljs-number">3</span>);<br>fun (<span class="hljs-number">13</span>);<br>fun (<span class="hljs-number">23</span>);<br>fun (<span class="hljs-number">33</span>);<br><span class="hljs-comment">// 函数的多次利用</span><br><span class="hljs-keyword">var</span> fun1 = outer(<span class="hljs-number">100</span>);<br>fun (<span class="hljs-number">22</span>);<br></code></pre></td></tr></table></figure><h2 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h2><h3 id="回顾作用域、作用域链、预解析"><a href="#回顾作用域、作用域链、预解析" class="headerlink" title="回顾作用域、作用域链、预解析"></a>回顾作用域、作用域链、预解析</h3><ul><li>全局作用域</li><li>函数作用域</li><li>没有块级作用域</li><li>内层作用域可以访问外层作用域，反之则不行</li></ul><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><ul><li>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来</li></ul><p>通俗解释：</p><p>​    函数定义时天生就能记住自己生成的作用域和函数自己，将它们形成一个密闭环境，这就是闭包。无论函数以任何方式在任何地方进行调用，都会回到自己定义时的密闭环境进行执行</p><h3 id="观察闭包"><a href="#观察闭包" class="headerlink" title="观察闭包"></a>观察闭包</h3><ul><li>从广义上来说，定义在全局的函数也是一个闭包，只是我们没办法将这样的函数拿到更外面的作用域进行调用，从而观察闭包的特点</li><li>闭包是天生存在的，不需要额外的结构，但是我们为了方便观察闭包的特点，需要利用一些特殊结构将一个父函数内部的子函数拿到父函数外部进行调用，从而观察闭包的存在</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 体会闭包</span><br><span class="hljs-comment">// 将一个内部函数拿到父函数外部调用，观察是否还能调用父函数内部的变量</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(a);<br>    &#125;    <br>    <span class="hljs-comment">// 返回内部函数</span><br>    <span class="hljs-keyword">return</span> inner;&#125;<br><span class="hljs-comment">// 将内部函数保存</span><br><span class="hljs-keyword">var</span> inn = outer();<br><span class="hljs-comment">// 确认 inn 就是内部的那个 inner 函数</span><br><span class="hljs-built_in">console</span>.log(inn);<br><span class="hljs-comment">// 试图直接调用</span><br>innerinn();<br><span class="hljs-comment">// 内部函数按道理来说应该会查找全局的 a 变量</span><br><span class="hljs-comment">// 但是输出的真正结果是 10，来自 outer 函数，证明了闭包的存在</span><br></code></pre></td></tr></table></figure><h3 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h3><ul><li>可以在函数外部读取函数内部的成员</li><li>让函数内成员始终存活在内存中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 闭包的用途</span><br><span class="hljs-comment">// 将一个内部函数拿到父函数外部调用，观察是否还能调用父函数内部的变量</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">outer</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 形成闭包环境中的变量不是一成不变的，可以进行修改</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(a++);<br>    &#125;    <br>    <span class="hljs-comment">// 返回内部函数</span><br>    <span class="hljs-keyword">return</span> inner;<br>&#125;<br><span class="hljs-comment">// 将内部函数保存</span><br><span class="hljs-keyword">var</span> inn = outer();<br><span class="hljs-comment">// 确认 inn 就是内部的那个 inner 函数</span><br><span class="hljs-built_in">console</span>.log(inn);<br><span class="hljs-comment">// 试图直接调用inner</span><br>inn();<span class="hljs-comment">//10</span><br>inn();<span class="hljs-comment">//11</span><br></code></pre></td></tr></table></figure><p><strong>因此：调用的内存函数只是认识闭包中的局部变量（词法环境），在调用内部函数时不会去执行外部函数的内容，当内层函数被调用时，函数执行会回到闭包区域内进行</strong></p><h3 id="闭包的问题"><a href="#闭包的问题" class="headerlink" title="闭包的问题"></a>闭包的问题</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 给数组中的每一项赋值一个 函数</span><br><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br>     i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>    arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(i);<br>    &#125;&#125;<br><span class="hljs-comment">// 目的：调用数组对应的项，输出它的对应下标</span><br>arr[<span class="hljs-number">0</span>]();<span class="hljs-comment">//11</span><br>arr[<span class="hljs-number">1</span>]();<span class="hljs-comment">//11</span><br>arr[<span class="hljs-number">2</span>]();<span class="hljs-comment">//11</span><br></code></pre></td></tr></table></figure><p>问题：函数暴露在全局作用域内，全局作用域中的全局变量 i 影响了函数输出，达不到想要的效果</p><p><strong>解决方案：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 给数组中的每一项赋值一个 函数</span><br><span class="hljs-keyword">var</span> arr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-comment">// 利用自调用函数产生闭包，闭包内每次记录当时循环时的 i 值，这样函数内部就不会被全局作用域下的 i 影响</span><br>    (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>) </span>&#123;<br>        arr[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(i);<br>        &#125;<br>    &#125;)(i)&#125;<br><span class="hljs-comment">// 目的：调用数组对应的项，输出它的对应下标</span><br>arr[<span class="hljs-number">0</span>]();<span class="hljs-comment">//0</span><br>arr[<span class="hljs-number">1</span>]();<span class="hljs-comment">//1</span><br>arr[<span class="hljs-number">2</span>]();<span class="hljs-comment">//2</span><br></code></pre></td></tr></table></figure><p>方案：循环内部多套一层自调用函数，产生闭包。第一个传入的 i 是形参，第二个传入的 i 是实参，达到了一个记录当时循环时的 i 值（var i = i）的效果，调用内部函数时会回到闭包内执行函数，不会受到外部全局变量中 i 的影响。</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>函数</tag>
      
      <tag>闭包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript常见的三种数组排序方式</title>
    <link href="/JavaScript%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E6%96%B9%E5%BC%8F/"/>
    <url>/JavaScript%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h2><p><strong>冒泡排序</strong> 的英文名是 Bubble Sort ，它是一种比较简单直观的排序算法</p><p>简单来说它会重复走访过要排序的数列，一次比较两个数，如果他们的顺序错误就会将他们交换过来，走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成</p><p>这个算法的名字由来是因为越小的元素会经由交换慢慢”浮”到数列的顶端</p><p><img src="%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="冒泡排序"></p><p><strong>算法思路（以按递增顺序排列为例）：</strong></p><p><strong>1、我们需要做一个内层循环来比较每对相邻元素的大小，如果前面大于后面，就让他们交换位置，我们要让小的数在前面，大的数在后面</strong></p><p><strong>2、当内层循环结束时，在数组最后一位的元素，就一定是这个数组中最大的元素了，这时候除了最后一个元素不用再动以外（所以内层循环每循环一次就可以少循环一次）我们还要再来确定这个数组中第二大的元素，第三大的元素，以此类推，因此我们还需要一层外层循环。如果这个数组有 n 个元素我们就要确定 n - 1 个元素的位置，所以外层循环需要循环的次数就是 n - 1 次</strong></p><p><strong>3、只需要内外两层循环嵌套，就可以把数组排序好啦，虽然实现方式可能有很多种，这只是我个人的想法，代码如下，排序功能已封装成函数，请放心食用：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myArr = [<span class="hljs-number">89</span>,<span class="hljs-number">34</span>,<span class="hljs-number">76</span>,<span class="hljs-number">15</span>,<span class="hljs-number">98</span>,<span class="hljs-number">25</span>,<span class="hljs-number">67</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bubbleSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; arr.length - i; j++) &#123;<br>        <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>            <span class="hljs-comment">// 交换两个数的位置</span><br>            <span class="hljs-keyword">var</span> temp = <span class="hljs-number">0</span>;<br>            temp = arr[j];<br>            arr[j] = arr[j + <span class="hljs-number">1</span>];<br>            arr[j + <span class="hljs-number">1</span>] = temp;<br>        &#125;<br>    &#125;<br>&#125;    <br><br>    <span class="hljs-keyword">return</span>  arr;      <br>&#125;<br><br><span class="hljs-built_in">console</span>.log(bubbleSort(myArr));<br></code></pre></td></tr></table></figure><h2 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h2><p><strong>选择排序</strong> 英文叫法是 Selection sort，这也是一种简单直观的排序方法</p><p>这种排序首先会在未排序的数组中找到最小或者最大的元素，存放在排序数组的起始位置</p><p>然后再从未排序的数列中去找到这个数组中第二大或这第二小的数放在已排序的数之后，以此类推，不断重复直到所有元素排列完毕</p><p><img src="%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序"></p><p><strong>算法思路（以按递增顺序排列为例）：</strong></p><p><strong>1、我们需要内层循环找出未排序数列中的最小值（找最小值可以用之前谁比最小值小谁就替换最小值的思路），循环后找到未排序数列中的最小元素时记录最小的那个元素在数组中的索引值，用索引获得最小值的位置后把它放在数组的第一位，此处注意，如果直接放在第一位会替换第一位数组中原来的元素，我们需要交换最小值的位置，和第一个元素的位置（利用两个变量交换数值的方法）</strong></p><p><strong>2、每经过一次内层循环，我们就能确定一个未排序数组中最小值的位置，在确定倒数第二个数的位置时，最后一个数的位置也自然而然地被确定了，因此数组中有 n 个元素我们就需要进行 n - 1 次内层循环，我们就用用外层循环来保持内层循环的重复进行</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myArr = [<span class="hljs-number">89</span>,<span class="hljs-number">34</span>,<span class="hljs-number">76</span>,<span class="hljs-number">15</span>,<span class="hljs-number">98</span>,<span class="hljs-number">25</span>,<span class="hljs-number">67</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">selectSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-comment">//i &lt; arr.length - 1 因为排完倒数第二个，倒数第一个数自然在它正确的位置了</span><br>        <span class="hljs-keyword">var</span> index = i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = i + <span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>            <span class="hljs-comment">// 寻找最小值</span><br>            <span class="hljs-keyword">if</span>(arr[index] &gt; arr[j])&#123;<br>                <span class="hljs-comment">// 保存最小值索引</span><br>                index = j;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 将未排序中的最小数字，放到未排序中的最左侧</span><br>        <span class="hljs-keyword">if</span>(index != i) &#123;<br>            <span class="hljs-keyword">var</span> temp = arr[i];<br>            arr[i] = arr[index];<br>            arr[index] = temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(selectSort(myArr));<br></code></pre></td></tr></table></figure><h2 id="三、插入排序"><a href="#三、插入排序" class="headerlink" title="三、插入排序"></a>三、插入排序</h2><p><strong>插入排序</strong> 英文称为 Insertion sort ，插入排序也被叫做直接插入排序</p><p>它的基本思想是将一个未排序的元素插入到已经排序好的数组中，从而使得已排序的数组增加一个元素，通过插入不断完善已排序数组的过程，就是排序整个数组的过程。</p><p><img src="%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序"></p><p><strong>算法思路（以按递增顺序排列为例）：</strong></p><p><strong>1、因为数组中第一个元素前面没有元素可以进行比较，所以我们从第二个元素开始比较，用 current 变量来进行存储当前要和别人比较的元素，用 preIndex变量 来方便我们去找当前准备插入元素之前的元素</strong></p><p><strong>2、内层循环就是按顺序比较插入元素和之前元素的大小，来确定插入元素的位置， preIndex 每比较一次就自减1 ，让准备插入元素和它之前的所有已排序元素都比较一遍，每当待插入元素比前一个数小了，前面的元素就往右挪一个位置，直到前一个数小于待插入数，跳出判断，待插入元素放在前一次判断挪动元素留出的空位上，由于我们提前用 current 保存了要插入的元素，所以要插入的元素不会因为前面的元素覆盖而丢失。</strong></p><p><strong>3、每循环一次内层循环，我们就可以确定一个元素的插入位置，但由于我们内层循环是从第二个元素开始的（也就是索引为 1 的元素），因此如果有 n 个元素，我们就需要 n - 1 次内层循环，内存循环我们用外层循环来实现，外层循环就这么被定义完成了</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myArr = [<span class="hljs-number">89</span>,<span class="hljs-number">34</span>,<span class="hljs-number">76</span>,<span class="hljs-number">15</span>,<span class="hljs-number">98</span>,<span class="hljs-number">25</span>,<span class="hljs-number">67</span>];<br>        <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insertionSort</span>(<span class="hljs-params">arr</span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>; i &lt;= arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> preIndex = i - <span class="hljs-number">1</span>;<br>        current = arr[i];<br>        <span class="hljs-keyword">while</span>(preIndex &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;<br>            arr[preIndex + <span class="hljs-number">1</span>] = arr[preIndex];<br>            preIndex--;<br>        &#125;<br>        arr[preIndex + <span class="hljs-number">1</span>] = current;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(insertionSort(myArr)); <br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h2><p><strong>选择排序（一种不稳定的排序方法）</strong></p><p><strong>优点</strong>：移动数据的次数已知（n-1次）；</p><p><strong>缺点</strong>：比较次数多。</p><p><strong>冒泡排序</strong></p><p><strong>优点</strong>：稳定；</p><p><strong>缺点</strong>：慢，每次只能移动相邻两个数据。</p><p><strong>插入排序</strong></p><p><strong>优点</strong>：稳定，快；</p><p><strong>缺点</strong>：比较次数不一定，比较次数越少，插入点后的数据移动越多，特别是当数据总量庞大的时候，但用链表可以解决这个问题。</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>JavaScript</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>数组排序方式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript构造函数和原型对象</title>
    <link href="/JavaScript%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1/"/>
    <url>/JavaScript%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%92%8C%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是对象？"><a href="#什么是对象？" class="headerlink" title="什么是对象？"></a><strong>什么是对象？</strong></h2><ul><li>Everything is object （万物皆对象）</li><li>我们可以从两个方面来理解</li></ul><ol><li>对象是单个事物的抽象</li><li>对象是一个容器，封装了属性（property）和方法（method）</li></ol><ul><li><p>属性：对象的状态</p></li><li><p>方法：对象的行为</p></li><li><p>在实际开发中，对象是一个抽象的概念，可以将其简单理解为：<strong>数据集或功能集</strong></p></li><li><p>ECMAScript-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或者函数</p></li></ul><h2 id="什么是面向对象？"><a href="#什么是面向对象？" class="headerlink" title="什么是面向对象？"></a>什么是面向对象？</h2><ul><li>面向对象编程 - object Oriented Programming，简称 OOP，是一种编程开发思想</li><li>它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟</li></ul><p><strong>面向对象与面向过程对比</strong></p><ul><li>面向过程就是亲力亲为，事无巨细，面面俱到，步步紧跟，有条不紊</li><li>面向对象就是找一个对象，指挥得结果</li><li>面向对象将执行者转变为指挥者</li><li>面向对象不是面向过程的替代，而是面向过程的封装</li></ul><p><strong>面向对象的特性</strong></p><ul><li>封装性</li><li>继承性</li><li>[多态性]抽象</li></ul><p><strong>总结：</strong></p><ul><li>在面向对象程序开发思想中，每个对象都是功能中心，具有明确分工，可以完成接受信息、处理数据、发出信息等任务</li><li>因此，面向对象编程具有灵活、代码可复用、高度模块化等有特点，容易维护开发，比起由一系列函数或指令组成的传统的过程式编程（procedural programming），更适合多人合作的大型软件项目</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;<br>    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;<br>    &lt;title&gt;体验面向过程和面向对象&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;script&gt;<br>        //面向过程<br>        // 定义学生的对象<br>        var std1 = &#123;name: &quot;Bob&quot;,score: 89&#125;;<br>        var std2 = &#123;name: &quot;Mike&quot;,score: 98&#125;;<br>        // 封装一个打印学生成绩的函数<br>        function printScore(student) &#123;<br>            console.log(&quot;姓名:&quot; + student.name + &quot;成绩:&quot; + student.score);<br>        &#125;<br>        // 具体调用函数打印对应成绩<br>        printScore(std1);<br>        printScore(std2);<br><br>        // 面向对象<br>        /* 首先考虑的不是整个流程,而是将一个学生当成一个对象,对象有两个属性存储性名和成绩,<br>        并且对象自己有打印成绩的功能,将所有跟学生有关的属性和行为都分装到对象身上<br>            在这个过程中,我们一直会有多个类似的的对象,可以利用构造函数的方法先进行封装,<br>        然后创建单独的对象<br>        抽象所有的数据行为成一个模板 (class)<br>        */<br>       function Student(name,score) &#123;<br>           this.name = name;<br>           this.score = score;<br>           this.printScore = function () &#123;<br>               console.log(&quot;姓名:&quot; + this.name + &quot;分数:&quot; + this.score);<br>           &#125;<br>       &#125;<br>        //  根据模板创建具体的实例对象 (Instance)<br>        var stu1 = new Student(&quot;Bob&quot;,89);<br>        var stu2 = new Student(&quot;Mike&quot;,98);<br>        // 调用实例对象自己的方法<br>       stu1.printScore();<br>       stu2.printScore();<br><br>    &lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><strong>面向对象的设计思想</strong></p><ul><li>抽象出 Class（构造函数）</li><li>根据 Class（构造函数）创建 Instance（实例）</li><li>指挥 Instance（实例） 得结果</li></ul><h2 id="对于创建对象的几种方式"><a href="#对于创建对象的几种方式" class="headerlink" title="对于创建对象的几种方式"></a>对于创建对象的几种方式</h2><blockquote><p>既然讲到了创建对象，我们就先把创建对象的几种方式先罗列一下，也算是给后面的重点做一个铺垫</p><p>对象在 JavaScript 里面的重要性相信不用我多说，万物皆对象呀！</p></blockquote><h3 id="简单的创建对象方式"><a href="#简单的创建对象方式" class="headerlink" title="简单的创建对象方式"></a>简单的创建对象方式</h3><p>用 <code>new Object()</code> 的方式来创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>person.name = <span class="hljs-string">&quot;Bob&quot;</span>;<br>person.age = <span class="hljs-number">18</span>;<br>person.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br>person.sayName();<br></code></pre></td></tr></table></figure><p>先用 <code>new Object()</code> 创建一个对象，然后再把 属性和方法逐渐补充上去</p><h3 id="对象字面量创建对象"><a href="#对象字面量创建对象" class="headerlink" title="对象字面量创建对象"></a>对象字面量创建对象</h3><p>用 <code>&#123;&#125;</code> 符号来进行创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person1 = &#123;<br>    <span class="hljs-attr">name</span> : <span class="hljs-string">&quot;Bob&quot;</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">18</span>,<br>    <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>属性和方法 在创建对象时放在 <code>&#123;&#125;</code> 内部，用键值对的方式一并创建</p><p><strong>前两种方法一次只能创建一个对象，在生成多个相似对象时，这种方式会出现大量重复造轮子，产生重复的代码，这样既影响代码的美观性，也影响了代码的运行效率，那如果我们想要批量生成对象就得看下面的方法了</strong></p><h3 id="工厂模式创建对象"><a href="#工厂模式创建对象" class="headerlink" title="工厂模式创建对象"></a>工厂模式创建对象</h3><p>创建一个普通函数，在函数内部来创建一个对象，给创建的对象添加属性和方法并返回对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPerson</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>    person.name = name;<br>    person.age = age;<br>    person.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>    <span class="hljs-keyword">return</span> person;<br>&#125;<br><br><span class="hljs-comment">//对象实例化</span><br><span class="hljs-keyword">var</span> person1 = createPerson(<span class="hljs-string">&#x27;Mike&#x27;</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><p>那我们能不能把 工厂模式写的更简单点，直接返回一个对象呢，答案是可以的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createPerson</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">name</span> : name,<br>        <span class="hljs-attr">age</span> : age,<br>        <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//对象实例化</span><br><span class="hljs-keyword">var</span> person1 = createPerson(<span class="hljs-string">&#x27;Mike&#x27;</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure><p>工厂模式通俗来说就是按照工厂一样来生成变量的过程，可以生成多个相似的对象，但是却没有解决对象的识别问题（即不知道这个对象的类型），看到构造函数就能明白没有解决对象识别是什么意思了</p><h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h3><p>什么是构造函数模式，它又有什么优点和缺点呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Mike&#x27;</span>,<span class="hljs-number">19</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Bob&#x27;</span>,<span class="hljs-number">21</span>);<br></code></pre></td></tr></table></figure><p>看代码，发现 <code>Person()</code>函数取代了<code>createPerson()</code>函数，构造函数名的<strong>首字母</strong>是<strong>大写</strong>的（这是规范），这是构造函数的惯例。因为构造函数也是函数，只不过是首字母大写的罢了，要配合 <code>new</code> 关键字才能体现出它的价值</p><p>换句话说，构造函数要配合 <code>new</code> 关键字一起使用才有意义（没有 new 来调用，构造函数和普通函数没有区别）</p><p>其实也就是和 <code>var person1 = new Object()</code>差不多，那么 <code>new</code> 关键字的作用是什么呢？</p><p><code>new </code>  关键字的用途</p><ul><li>创建一个新对象</li><li>将函数内部的 this 指向了这个新对象</li><li>执行构造函数内部的代码</li><li>将新对象作为返回值</li></ul><p>看到这我们会想，构造函数和对象是如何联系的，我们把构造函数这块单独拉出来讲比较好</p><h2 id="构造函数和普通函数的区别："><a href="#构造函数和普通函数的区别：" class="headerlink" title="构造函数和普通函数的区别："></a><strong>构造函数和普通函数的区别：</strong></h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>构造函数和普通函数的唯一的区别不在于它们自己本身，而是在调用方式</li><li>任何函数只要通过 <code>new</code> 来调用，那它就可以作为构造函数，如果任何函数不通过 <code>new</code> 操作符来调用，那它就是普通的函数。</li></ol><h3 id="关于返回值"><a href="#关于返回值" class="headerlink" title="关于返回值"></a>关于返回值</h3><ul><li>普通函数在有 <code>return</code> 返回值时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <br><span class="hljs-built_in">console</span>.log (foo());<br></code></pre></td></tr></table></figure><p>返回返回值的内容</p><ul><li>普通函数在没有<code>return</code>返回值时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span> (<span class="hljs-params"></span>) </span>&#123;<br><br> &#125; <br><span class="hljs-built_in">console</span>.log (foo());<br></code></pre></td></tr></table></figure><p>返回 <code>undefined</code></p><ul><li>构造函数在有 <code>return</code> 返回值时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> Foo();<br><span class="hljs-built_in">console</span>.log(test);<br></code></pre></td></tr></table></figure><p>返回构造函数实例化的对象</p><ul><li>构造函数在无 <code>return</code> 返回值时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>&#125; <br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> Foo();<br><span class="hljs-built_in">console</span>.log(test);<br></code></pre></td></tr></table></figure><p>返回构造函数实例化的对象</p><ul><li>构造函数在有 <code>return</code> 返回值且返回值是对象时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span> (<span class="hljs-params"></span>) = </span>&#123;<br><span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Mike&#x27;</span>&#125;<br>&#125; <br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> Foo();<br><span class="hljs-built_in">console</span>.log(test);<br></code></pre></td></tr></table></figure><p>返回 返回值中的对象</p><p><strong>因此</strong></p><p><strong>普通函数有返回值则返回返回值，没有返回值则返回 undefined</strong></p><p><strong>构造函数有返回值且返回值是个对象，就返回这个对象，如果构造函数没有返回值就返回构造函数生成的实例化对象</strong></p><h3 id="关于-this的值"><a href="#关于-this的值" class="headerlink" title="关于 this的值"></a>关于 this的值</h3><p>普通函数的 <code>this </code>值指向 <code>window </code>对象</p><p>构造函数内的 <code>this </code>值指向实例对象</p><h2 id="构造函数的优缺点"><a href="#构造函数的优缺点" class="headerlink" title="构造函数的优缺点"></a>构造函数的优缺点</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点：</strong></h3><p>其实我们在上面代码中创建的两个实例对象，都会有个 <code>constructor</code>（构造函数）属性，<strong>实例对象</strong>就是通过这个属性来<strong>指向 构造函数的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(person1.constructor === Person);<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(person2.constructor === Person);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>不过用 <code>instanceof</code> 操作符来检测对象类型会更加可靠</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(person1 <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.log(person2 <span class="hljs-keyword">instanceof</span> Person);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>创建自定义的构造函数意味着将来可以将他的<strong>实例标识为一种特殊类型</strong>，这就是构造函数比工厂模式强的地方，因为构造函数生成的实例知道自己从哪里来，通过谁产生的，这很重要</p><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><strong>缺点：</strong></h3><p>构造函数最明显的缺点就是，每个方法都要在每个实例上重新创建一遍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span> (<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>    <span class="hljs-built_in">this</span>.sayAge = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.Age);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Mike&#x27;</span>,<span class="hljs-number">19</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;Bob&#x27;</span>,<span class="hljs-number">21</span>);<br></code></pre></td></tr></table></figure><p>就像以上代码，<code>sayName</code> 方法 和 <code>sayAge</code>  方法，在实例上没有必要重新创建</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(person1.sayName === person2.sayName);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>判断各自方法发现他们各自都开辟了一个新的空间，这引起了一种<strong>内存的浪费</strong></p><h2 id="优化构造函数"><a href="#优化构造函数" class="headerlink" title="优化构造函数"></a>优化构造函数</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//解决1：将公共函数提取到构造函数之外</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayName</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayAge</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sayName = sayName;<br>    <span class="hljs-built_in">this</span>.sayAge = sayAge;<br><span class="hljs-comment">// this 内部的 type 属性值所在的内存是不变的</span><br>    <span class="hljs-built_in">this</span>.type = <span class="hljs-string">&quot;human&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方法可以解决内存浪费的问题，但是</p><p>问题：如果有多个公共函数，需要在外部创建多个函数，可能会造成命名冲突</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 解决2 将多个公共函数封装到一个对象中</span><br><span class="hljs-keyword">var</span> fns = &#123;<br>    <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;,<br>    <span class="hljs-attr">sayAge</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-built_in">this</span>.sayName = fns.sayName;<br>    <span class="hljs-built_in">this</span>.sayAge = fns.sayAge;<br>    <span class="hljs-comment">// this 内部的 type 属性值所在的内存是不变的</span><br>    <span class="hljs-built_in">this</span>.type = <span class="hljs-string">&quot;human&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样就又可以解决内存浪费问题，还能防止命名冲突</p><p>但是….这我们创建构造函数的意义何在，生成对象全部由构造函数解决那才舒服不是么</p><p>这样我们就需要 原型对象 来帮我们解决这个问题了</p><p>还记得前面提到 <code>constructor</code>属性么，我们现在要来深入理解下构造函数</p><h2 id="构造函数的原型对象"><a href="#构造函数的原型对象" class="headerlink" title="构造函数的原型对象"></a>构造函数的原型对象</h2><p>补充：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">    静态成员和实例成员：</span><br><span class="hljs-comment">    ·使用构造函数方法创建对象时，可以给构造函数和创建实例对象添加属性和方法，这些属性和方法都叫做成员</span><br><span class="hljs-comment">    ·实例成员：在构造函数内部添加给 this 的成员，属于实例对象的成员，在创建实例对象后必须由对象调用</span><br><span class="hljs-comment">    ·静态成员：添加给构造函数自身的成员，只能使用构造函数调用，不能使用生成的实例对象调用</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// 自定义构造函数</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">// 实例成员，通过将来生成的实例对象进行调用的成员</span></span><br><span class="javascript">    <span class="hljs-comment">// 创建时直接调用给函数内部的 this</span></span><br><span class="javascript">    <span class="hljs-built_in">this</span>.name = name;</span><br><span class="javascript">    <span class="hljs-built_in">this</span>.age = age;</span><br><span class="javascript">    <span class="hljs-built_in">this</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);</span><br><span class="javascript">    &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-comment">// 静态成员 -- 直接给构造函数添加的成员，无法被实例对象调用</span></span><br><span class="javascript">Person.version = <span class="hljs-string">&quot;1.0&quot;</span>;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上的知识点是对构造函数的补充</p><p>接下来我们的重点是原型对象</p><p>以下是一个构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name;<br>    <span class="hljs-built_in">this</span>.age;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以用 <code>prototype</code> 属性，获取构造函数的原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(Person.prototype);<br></code></pre></td></tr></table></figure><p>原型对象内可以添加一些属性和方法，它可以抽象理解为一连接着<strong>构造函数</strong>和它的<strong>实例对象</strong>的一个<strong>公共空间</strong>，在这个公共空间内创建的对象和属性，会传递给构造函数，而且构造函数创建的实例对象也可以调用这些函数和属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Person.prototype.type = <span class="hljs-string">&quot;human&quot;</span>;<br>Person.prototype.sayHi = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Hi&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>大致就是这样一个意思，接下来我们来看下他们三者是如何“相爱相杀”，哦不，如何联系在一起的吧！</p><p>先上图：</p><p><img src="%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B.jpg" alt="构造函数原型"></p><ul><li>首先构造函数有自己的 <code>prototype</code> 属性指向自己的原型对象</li><li>原型对象 有一个 <code>constructor</code> 属性返回来指向构造函数(调用方式：构造函数名<code>.prototype.constructor)</code></li><li>构造函数可以通过 <code>new </code>方法生成实例对象</li><li>实例对象通过 <code>__proto__ </code>的属性可以找到原型对象</li></ul><p>不过对于实例在日常开发中，是不会书写 <code>__proto__</code>属性的，直接打点调用原型对象上的方法即可</p><p><strong><code>__proto__</code>属性</strong>并不是一个标准的属性，是浏览器根据语法自动生成的</p><p>因为 <code>__proto__ </code> 属性并不是一个标准的属性，是浏览器根据语法自动生成的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 定义构造函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">// 更优的解决方法，将所有实例共享的属性和方法，都添加给原型对象</span><br>Person.prototype.type = <span class="hljs-string">&quot;human&quot;</span>;<br>Person.prototype.sayName = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 方法调用时，哪个对象调用，this就指向谁</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>&#125;<br>Person.prototype.sayAge = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 方法调用时，哪个对象调用，this就指向谁</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.age);<br>&#125;<br><br><span class="hljs-comment">// 生成实例对象</span><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Mike&quot;</span>,<span class="hljs-number">21</span>);<br><br><span class="hljs-comment">// 调用原型对象上公用的属性方法</span><br>person1.sayAge();<br>person1.sayName();<br>person2.sayAge();<br>person2.sayName();<br></code></pre></td></tr></table></figure><p>这样我们就解决了构造函数创建对象内存浪费问题</p><p>对于以上<strong>两种方法</strong>以及<strong>第三种利用构造函数原型的方法</strong>中内存地址是否相同，如果存在怀疑的话我们还可以测试下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(person<span class="hljs-number">1</span>.sayAge === person<span class="hljs-number">2</span>.sayAge);<br><span class="hljs-attribute">console</span>.log(person<span class="hljs-number">1</span>.sayName === person<span class="hljs-number">2</span>.sayName);<br></code></pre></td></tr></table></figure><p>输出的结果都是 <code>true</code>哦！</p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><h3 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h3><p><strong>为什么实例对象可以调用构造函数的 prototype 原型对象的属性和方法？</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Person</span>(<span class="hljs-params">name,age</span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Lily&quot;</span>,<span class="hljs-number">20</span>);<br><br><span class="hljs-built_in">console</span>.log(person1);<br></code></pre></td></tr></table></figure><p><img src="%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1.png" alt="原型对象"></p><p>可以看到我们给对象定义的两个属性（<code>age</code> 和 <code>name</code>），我们点开 <code>__proto__</code> 指针，里面就是原型对象的内容</p><p>显示出了原型对象中我们加入的 <code>sayName </code>函数，以及 <code>type</code> 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> o = person1.__proto__; <span class="hljs-comment">//指向的是 Persn 构造函数的原型对象</span><br></code></pre></td></tr></table></figure><p>任何一个对象 都有 <code>__proto__</code> 属性，指向的就是该对象的 构造函数的 原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//实例对象的构造函数的原型对象</span><br><span class="hljs-keyword">var</span> o = person1.__proto__;<br><span class="hljs-comment">//原型对象的构造函数的原型对象</span><br><span class="hljs-keyword">var</span> o2 = o.__proto__;<br><span class="hljs-built_in">console</span>.log(o2);<br><span class="hljs-comment">//原型对象的构造函数</span><br><span class="hljs-built_in">console</span>.log(o2.constructor);<br></code></pre></td></tr></table></figure><p><img src="%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%E6%9D%A5%E6%BA%90.png" alt="原型对象来源"></p><p>我们就发现原来我们的构造函数的原型对象，都是由一个 <code>Object()</code> 构造函数生成的</p><p>而这个构造函数来源于另一个我们没见过的原型对象</p><p>因为任何一个对象都有 <code>__proto__</code> 属性，其实我们还可以看看这个 Object()原型对象的构造函数的原型对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(o2.__proto__);<br></code></pre></td></tr></table></figure><p>然后就输出了 <code>null</code> (没有任何内容–没有任何属性和方法)</p><p>其实以上四个原型对象就是我们探究的原型链的组成部分</p><p><img src="%E5%8E%9F%E5%9E%8B%E9%93%BE.jpg" alt="原型链"></p><p>那原型链有什么用？</p><p>当我们查找一个方法时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(person1.valueOf());<br></code></pre></td></tr></table></figure><p>我们 person1 的构造函数的原型对象没有这个方法，就会往上级原型对象查找方法</p><p>案例在 Object 原型对象 中找到了 valueOf() 方法，并输出了实例对象本身</p><p>铺垫的差不多了，那么原型链查找机制就该有个定义了</p><h3 id="原型链查找机制"><a href="#原型链查找机制" class="headerlink" title="原型链查找机制"></a>原型链查找机制</h3><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性</p><ol><li>搜索首先从对象实例本身开始</li><li>如果在实例中找到了具有给定名字的属性，则返回该属性的值</li><li>如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性</li><li>如果在原型对象中找到了这个属性，则返回该属性的值</li></ol><p><strong>实例对象读写原型对象的成员</strong></p><p>读取：</p><ul><li>现在自己身上找，找到即返回</li><li>自己身上找不到，则沿着原型链向上查找，找到即返回</li><li>如果一直到原型链末端都没有找到，则返回 <code>undefined</code></li></ul><p>值类型成员写入（实例对象.值类型成员 = xx）</p><ul><li>当实例重写原型对象中的某个普通数据成员时实际上会把<strong>该成员添加到自己身上</strong></li><li>也就是说该行为实际上会<strong>屏蔽掉对原型对象成员的访问</strong></li><li>想通过实例对象直接打点更改原型对象的值和方法是不会成功的，实例对象只会给自己添加新的值和方法</li><li>想要通过实例对象更改原型对象的值必须 <code>实例对象的构造函数.prototype.值/方法 </code>来创建/更改</li></ul><p>引用类型成员写入（实例对象.引用类型成员 = xx）：</p><ul><li>同上</li></ul><p>但是如果时复杂类型成员进行修改就不一样了</p><p>复杂类型成员修改（实例对象.成员.xx = xx）</p><ul><li>同样会现在自身找该成员，如果自身找到直接修改</li><li>如果自身找不到，则沿着原型链继续查找，如果找到则修改</li><li>如果一直到原型链的末端还没有找到该成员，则报错（实例对象.undefined.xx = xx）</li></ul><h3 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h3><p>前面在原型对象每添加一个属性和方法就要书写一遍 Person.prototype</p><p>为减少不必要的输入，更常见的做法是用一个包含所有属性和方法的 <strong>对象字面量</strong>来重写整个原型对象将<code>Person.prototype</code> 重置到一个新的对象</p><p>注意：原型对象会丢失 <code>constructor</code> 成员，所以需要手动将 <code>constructor</code>指向正确的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//直接使用对象字面量对原型对象进行赋值</span><br>Person.prototype = &#123;<br>    <span class="hljs-attr">type</span> : <span class="hljs-string">&quot;human&quot;</span><br>    <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//生成对象实例</span><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&quot;Mike&quot;</span>,<span class="hljs-number">28</span>);<br>person1.sayName();<br><span class="hljs-comment">//缺陷</span><br><span class="hljs-built_in">console</span>.log(person2,<span class="hljs-title">constructor</span>);<span class="hljs-comment">//Object()</span><br><span class="hljs-comment">//因为 Person.prototype 的 constructor 属性被重置了，person2 的构造函数 Person 的原型对象里面找不到这个值，就输出了有 constructor 属性的 上级原型对象 Object() </span><br><br><span class="hljs-comment">//解决方式，赋值时多加一条 constructor 属性</span><br>Person.prototype = &#123;<br>    <span class="hljs-attr">constructor</span> : Person, <span class="hljs-comment">//手动把 constructor 属性指向正确的构造函数</span><br>    <span class="hljs-attr">type</span> : <span class="hljs-string">&quot;human&quot;</span>,<br>    <span class="hljs-attr">sayName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="原型对象的使用建议"><a href="#原型对象的使用建议" class="headerlink" title="原型对象的使用建议"></a>原型对象的使用建议</h3><p>在定义构造函数时，可以根据成员的功能不同，分别进行设置</p><ul><li>私有成员（一般就是非函数成员）放到构造函数中</li><li>共享成员（一般就是函数）放到原型对象中</li><li>如果重置了 prototype 记得修正 constructor 的指向</li></ul><h3 id="JS-原生构造函数的原型对象"><a href="#JS-原生构造函数的原型对象" class="headerlink" title="JS 原生构造函数的原型对象"></a>JS 原生构造函数的原型对象</h3><p>所有函数都有 prototype 属性对象</p><p>JavaScript 中的内置构造函数也有 prototype 原型对象属性：</p><ul><li>Object.prototype</li><li>Function.prototype</li><li>Array.prototype</li><li>String.prototype</li><li>Number.prototype</li></ul><p>…</p><p>想知道这些原型对象中都有什么，那就自己去输出看看吧~</p>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>构造函数</tag>
      
      <tag>原型对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript的一些隐式转换</title>
    <link href="/JavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
    <url>/JavaScript%E7%9A%84%E4%B8%80%E4%BA%9B%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="1、JS中的“-”隐式转换规则"><a href="#1、JS中的“-”隐式转换规则" class="headerlink" title="1、JS中的“==”隐式转换规则"></a>1、JS中的“==”隐式转换规则</h2><ul><li>对象和布尔值进行比较的时候，对象会先转换为字符串，然后转换为数字，而参与比较的布尔值会直接转换为数字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[] == <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>结果为<code>true</code>，<code>[]</code>先转换为字符串 <code>&quot;&quot;</code> ，然后再转换为数字 <code>0</code>，布尔值 <code>false</code> 直接转换为数字 <code>0</code></p><ul><li>对象和字符串进行比较时，对象转换为字符串，然后两者进行比较</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;8,2,5&#x27;</span><br></code></pre></td></tr></table></figure><p>结果是 <code>true</code> ， <code>[8,2,5]</code> 转化为字符串 <code>&quot;8,2,5&quot;</code></p><ul><li>对象和数字比较时，对象转化为字符串,然后转换为数字，再和数字进行比较</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>结果为 <code>true</code> ，<code>[1]</code> 转换为字符串 <code>&quot;1&quot;</code>，然后再转换为数字 <code>1</code></p><ul><li>字符串和数字比较时，字符串转换为数字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">`1`</span> == <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>结果为<code>true</code> ，字符串<code>&quot;1&quot;</code>转换为数字 <code>1</code>，<code>1 == 1 =&gt; true</code></p><ul><li>字符串和布尔值进行比较时，二者全部转换成数值再比较</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;1&#x27;</span> == <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>结果为<code>true</code> ，字符串<code>&quot;1&quot;</code>转换为数字 <code>1</code>，<code>true</code>转换为数字 <code>1</code>，然后：  <code>1 == 1 =&gt; true</code></p><ul><li>布尔值和数字进行比较时，布尔值转为数字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">true</span> == <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>结果为 <code>true</code>，<code>true</code>转换为数字 <code>1</code>再进行比较</p><p><img src="%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="流程图"></p><h2 id="2、if-判断时，括号内的隐式转换"><a href="#2、if-判断时，括号内的隐式转换" class="headerlink" title="2、if 判断时，括号内的隐式转换"></a>2、if 判断时，括号内的隐式转换</h2><p>其实，如果要详细讨论哪些值在 <code>if</code> 中强制转换为 <code>true</code>，哪些值在 <code>if</code> 中强制转换为 <code>false</code> 这很困难，因为情况实在太多了。但是有个办法可以让我们轻松记住规律，那就是记住何时 <code>if</code> 中的值会强制转换为<code>false</code></p><p><strong>强制转换为 <code>false</code> 仅有的四种情况：</strong></p><ol><li>数字 <code>1</code></li><li><code>NaN</code></li><li>空字符串</li><li><code>null</code> 或 <code>undefined</code></li></ol><p>ps.在非严格相等的情况下，<code>null</code> 和 <code>undefined</code> 是相等的</p><h2 id="3、补充"><a href="#3、补充" class="headerlink" title="3、补充"></a>3、补充</h2><p>特殊的一些情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">undefined</span> == <span class="hljs-literal">null</span> <span class="hljs-comment">//true undefined和null 比较返回true，二者和其他值比较返回false</span><br><span class="hljs-built_in">Number</span>(<span class="hljs-literal">null</span>) <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><p>一些算法题上经常出现的坑</p><ul><li><p><code>&#123;&#125;</code>转换为字符串是<code>&#39;[object Object]&#39;</code></p></li><li><p><code>&#39;[object Object]&#39;</code> 转换为数值时 <code>NaN</code></p></li></ul><ol><li><code>null</code> 和 <code>undefined</code> 是相等的（非严格相等，及非 <code>===</code>）</li><li>要比较相等性之前，不能将 <code>null</code> 和 <code>undefined</code> 转换成其他任何值</li><li>如果有一个操作数是NaN，则相等操作符返回 <code>false</code> ，而不相等操作符返回 <code>true</code>。重要提示：即使两个操作数都是<code>NaN</code>，相等操作符也返回 <code>false</code>了；因为按照规则， <strong><code>NaN</code> 不等于 <code>NaN</code></strong></li><li>如果两个操作数都是对象，则比较它们是不是同一个对象，如果两个操作数都指向同一个对象，则相等操作符返回 <code>true</code>；否则， 返回<code>false</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端开发</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在hexo上创建一篇文章</title>
    <link href="/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <url>/%E5%A6%82%E4%BD%95%E5%9C%A8hexo%E4%B8%8A%E5%88%9B%E5%BB%BA%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>个人博客终于搭好了，虽然功能还没有完善但是还是可以写文章的。现在感觉自己前端基础学的差不多了，找了半天博客的主题渲染文件，发现都在 <code>layout</code> 文件夹内，但是打开博客源文件中的 <code>.ejs</code>  的文件，哎，我好菜呀！虽然有看得懂的函数和标签，但是这一堆 <code>&lt;% %&gt;</code>，都是些啥呀？改天再研究研究~嗯！今天主题是写文章！</p></blockquote><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>使用命令来新建文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ABAP">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p><code>layout </code> 是文章的布局，默认为 <code>post</code>，可以先不写</p><p><code>title</code> 是文章的布局，默认为 <code>post</code> ，可以先不写</p><p>创建文章</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@localhost blog]# hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;文章标题&quot;</span><br>...<br>INFO  Created: <span class="hljs-regexp">/blog/</span><span class="hljs-keyword">source</span><span class="hljs-regexp">/_posts/</span>文章标题.md<br></code></pre></td></tr></table></figure><h2 id="初始化文章"><a href="#初始化文章" class="headerlink" title="初始化文章"></a>初始化文章</h2><p>在文章的最上面你会发现一个特殊区域</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 如何在hexo上创建一篇文章<br>date: 2021-05-12 12:45:43<br>categories:<br><span class="hljs-bullet">-</span> 制作博客<br>tags:<br><span class="hljs-bullet">-</span> hexo<br><span class="hljs-section">- 个人博客</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>这个区域的名字叫做 <strong>Front-matter</strong> </p><p>这边罗列一下预先定义的参数：</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td>无</td></tr><tr><td>title</td><td>标题</td><td>无</td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启文章的评论功能</td><td>true</td></tr><tr><td>tags</td><td>标签</td><td>（不适用于分页）</td></tr><tr><td>categories</td><td>分类</td><td>（不适用于分页）</td></tr><tr><td>permalink</td><td>覆盖文章网址</td><td>无</td></tr></tbody></table><p>一般自己更改的部分只有 <code>categories</code> 和 <code>tags</code> 这两项</p><h2 id="分类与标签"><a href="#分类与标签" class="headerlink" title="分类与标签"></a>分类与标签</h2><p>在使用 <code>categories</code> 和 <code>tags</code>之前需要对 <code>hexo </code>进行初始化</p><ul><li>生成 ‘’分类’’ 页</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> categories<br></code></pre></td></tr></table></figure><ul><li>成功后提示</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">INFO  Created: ~<span class="hljs-regexp">/Documents/</span>blog<span class="hljs-regexp">/source/</span>categories/index.md<br></code></pre></td></tr></table></figure><p>然后根据上面的路径就可以找到 <code>index.md </code>文件啦</p><p>然后在 Front-matter 区域添加 <code>type: &quot;categories&quot;</code></p><p>添加完效果如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章分类</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2017-05-27 13:47:40</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>保存并关闭，我们就把分类部分初始化完毕了</p><p>你在初始化文章的时候，只要把 <code>categories</code> 的参数设置上，分类的内容就自动会在 分类部分生成了</p><p>标签部分的初始化方法与分类部分类似 只要把 <code>categories</code> 改成 <code>tags</code> 即可，<code>tags</code>文件夹也会在<code>source </code>文件夹生成</p><p>别忘了把 <code>tags</code> 文件夹内的 <code>index.md</code>也加上 <code>type</code> 就可以了</p><h2 id="需要注意的内容"><a href="#需要注意的内容" class="headerlink" title="需要注意的内容"></a>需要注意的内容</h2><p><strong>注意：Front-matter 内容部分  ‘:’ 和 ‘-‘ 后都有一个空格</strong></p><p>Front-matter 中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">如何在hexo上创建一篇文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-05-12 12:45:43</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">分类1</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">分类2</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>同上用法，分类1和分类2不像 <code>tags</code>那样为同级，这两个分类不是同级关系，而是 分类1 是 分类2 的父级分类</p><p>如果想将一篇文章添加到不同分类应该这么写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">如何在hexo上创建一篇文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-05-12 12:45:43</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> [<span class="hljs-string">分类1</span>]<br><span class="hljs-bullet">-</span> [<span class="hljs-string">分类2</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>也可以添加到同一个分类的两个子分类中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">如何在hexo上创建一篇文章</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2021-05-12 12:45:43</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-bullet">-</span> [<span class="hljs-string">分类1</span>,<span class="hljs-string">分类1的子分类1</span>]<br><span class="hljs-bullet">-</span> [<span class="hljs-string">分类1</span>,<span class="hljs-string">分类1的子分类2</span>]<br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>这样大致该怎么写博客文章应该讲的差不多啦，也知道如何给博客添加标签和分类了，博客基本功能就有了</p><p>毕竟啊，博客就是用来写文章的嘛</p><p>啊，不是啊？是用来看的呀，是嘛，那改天再想想怎么美化博客吧！</p><h2 id="对参数的补充"><a href="#对参数的补充" class="headerlink" title="对参数的补充"></a>对参数的补充</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>subtitle</td><td>*副标题</td><td>与主标题一致</td></tr><tr><td>index_img</td><td>*主页面列表图</td><td>主体内配置图片</td></tr><tr><td>author</td><td>作者名字</td><td></td></tr><tr><td>language</td><td>语言</td><td>网页默认语言</td></tr><tr><td>timezone</td><td>网站时区</td><td>本电脑时区</td></tr><tr><td>description</td><td>*描述</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>最后再补充一些有用的参数，感觉副标题和描述还挺有用的！</p>]]></content>
    
    
    <categories>
      
      <category>制作博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>个人博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
